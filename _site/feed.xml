<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Hou</title>
    <description>Kevin Hou's portfolio and blog about programming, wood, design, and photography. @khou22 Princeton Class of 2020. Lick-Wilmerding High School Class of 2016. San Francisco Bay Area.
</description>
    <link>http://khou22.github.io/</link>
    <atom:link href="http://khou22.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 06 Aug 2017 19:00:20 -0400</pubDate>
    <lastBuildDate>Sun, 06 Aug 2017 19:00:20 -0400</lastBuildDate>
    <generator>Jekyll v3.4.5</generator>
    
      <item>
        <title>My Custom VIM Configuration: Installation, Usage, and Capabilities</title>
        <description>&lt;h1 id=&quot;setting-up-vim&quot;&gt;Setting Up VIM&lt;/h1&gt;
&lt;p&gt;VIM is configured using a &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; file in your root directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt;) and serves as the configuration file. It is similar to a &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; in the sense that it must be sourced to reflect changes, but VIM automatically takes care of when it launches. Ensure that the &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vimrc&lt;/code&gt; file exists and if not, create one. Now here’s how the complete setup:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Copy/paste the contents of my configuration file into your &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; file or replace the file itself. This will give you all the configurations that I use. Before you are done, you need to install the packages that are used in the configuration.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Like I said earlier, I’m using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt; as my package manager service. Install &lt;code class=&quot;highlighter-rouge&quot;&gt;vim-plug&lt;/code&gt; using:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Open VIM - type &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt; to open the VIM command line. You will be using this a lot. Type &lt;code class=&quot;highlighter-rouge&quot;&gt;PlugInstall&lt;/code&gt; and press Enter.
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;VIM has a handful of common “listener keys” that let VIM know you are about to perform a custom key command. This includes &lt;code class=&quot;highlighter-rouge&quot;&gt;:&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;,&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;, etc.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: Sometimes need to source the &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; file first:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  :source %
  :PlugInstall
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Install &lt;strong&gt;MacVim&lt;/strong&gt;&lt;br /&gt;
 Some plugins will require a higher version of VIM than the out-of-the-box built-in default for Macs. Many references online have recommended using &lt;a href=&quot;macvim-dev.github.io&quot;&gt;MacVim&lt;/a&gt; and aliasing its CL interface to “replace” the default. Add this to your &lt;code class=&quot;highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt; after you’ve installed MacVim:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; # Mac VIM Alias
 alias vim='/Applications/MacVim.app/Contents/MacOS/Vim'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;There are a few plugins that require additional installations that don’t get setup automatically using &lt;code class=&quot;highlighter-rouge&quot;&gt;vim-plug&lt;/code&gt;. Follow the steps below to configure these libraries:
    &lt;h4 id=&quot;pathogen--package-loader&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Pathogen&lt;/code&gt; — Package loader&lt;/h4&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; mkdir -p ~/.vim/autoload ~/.vim/bundle &amp;amp;&amp;amp; curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h4 id=&quot;ag---for-project-file-grepping&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AG&lt;/code&gt; - For project file grepping&lt;/h4&gt;
    &lt;p&gt;(‘AG’ stands for the silver element in periodic table)&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; brew install the_silver_searcher
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h4 id=&quot;youcompleteme---autocomplete&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;YouCompleteMe&lt;/code&gt; - Autocomplete&lt;/h4&gt;
    &lt;ol&gt;
      &lt;li&gt;Install Cmake: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ brew install CMake&lt;/code&gt;
        &lt;ul&gt;
          &lt;li&gt;On dev box (Ubuntu): &lt;code class=&quot;highlighter-rouge&quot;&gt;$ sudo apt-get install cmake&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Finish install: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ python ~/.vim/plugged/YouCompleteMe/install.py&lt;/code&gt;
        &lt;h4 id=&quot;solarized-colorscheme-for-vim--theme&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Solarized Colorscheme for VIM&lt;/code&gt; — Theme&lt;/h4&gt;
      &lt;/li&gt;
      &lt;li&gt;Install into &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle&lt;/code&gt; folder. Create it if the directory doesn’t exist.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; $ cd ~/.vim/bundle
 $ git clone git://github.com/altercation/vim-colors-solarized.git
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;ol&gt;
      &lt;li&gt;Set the theme in &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;.&lt;/li&gt;
    &lt;/ol&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; syntax enable
 &quot; Use 'light' if want the light theme
 set background=dark
 colorscheme solarized
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;h4 id=&quot;nerdtree---project-heiarchy-in-sidebar&quot;&gt;NERDTree - Project Heiarchy in Sidebar&lt;/h4&gt;
    &lt;ol&gt;
      &lt;li&gt;Ensure you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vim/bundle/&lt;/code&gt; directory&lt;/li&gt;
      &lt;li&gt;Install using: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ git clone https://github.com/scrooloose/nerdtree.git ~/.vim/bundle/nerdtree&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;NERDTree will automatically open when VIM opens because of this command in the &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt;:&lt;/p&gt;

        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; autocmd vimenter * NERDTree
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;commands&quot;&gt;Commands&lt;/h1&gt;

&lt;h3 id=&quot;vim-environment&quot;&gt;VIM Environment&lt;/h3&gt;
&lt;p&gt;Launch VIM: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ vim &amp;lt;file/directory (optional)&amp;gt;&lt;/code&gt;&lt;br /&gt;
Close current pane: &lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt;&lt;br /&gt;
Quitting all panes: &lt;code class=&quot;highlighter-rouge&quot;&gt;:qa&lt;/code&gt;&lt;br /&gt;
Save: &lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt;&lt;br /&gt;
Save &amp;amp; Quit: &lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;switching-input-modes&quot;&gt;Switching input modes&lt;/h3&gt;
&lt;p&gt;Highlight mode: &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;&lt;br /&gt;
Insert mode (keyboard and arrow keys will work like normal): &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;&lt;br /&gt;
Viewing mode (if in highlight or insert mode): &lt;code class=&quot;highlighter-rouge&quot;&gt;Esc&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;navigating-in-file-non-insert-mode&quot;&gt;Navigating In-File (Non-Insert Mode)&lt;/h3&gt;
&lt;p&gt;Go to line: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Line-Number&amp;gt;&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;G&lt;/code&gt;&lt;br /&gt;
Back one word: &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;&lt;br /&gt;
Forward one word: &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt;&lt;br /&gt;
Move to first non-blank character of line (Like &lt;code class=&quot;highlighter-rouge&quot;&gt;Command + Left&lt;/code&gt;): &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;&lt;br /&gt;
Move to last non-blank character of line (Like &lt;code class=&quot;highlighter-rouge&quot;&gt;Command + Right&lt;/code&gt;): &lt;code class=&quot;highlighter-rouge&quot;&gt;g_&lt;/code&gt;&lt;br /&gt;
Beginning of line: &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;&lt;br /&gt;
End of line: &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + 4&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;)&lt;br /&gt;
Page up: &lt;code class=&quot;highlighter-rouge&quot;&gt;Control + B&lt;/code&gt;&lt;br /&gt;
Page Down: &lt;code class=&quot;highlighter-rouge&quot;&gt;Control + F&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Arrow key mappings:&lt;/strong&gt;&lt;br /&gt;
Up: &lt;code class=&quot;highlighter-rouge&quot;&gt;k&lt;/code&gt;&lt;br /&gt;
Down: &lt;code class=&quot;highlighter-rouge&quot;&gt;j&lt;/code&gt;&lt;br /&gt;
Left: &lt;code class=&quot;highlighter-rouge&quot;&gt;h&lt;/code&gt;&lt;br /&gt;
Right: &lt;code class=&quot;highlighter-rouge&quot;&gt;l&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Move &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; positions: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;number&amp;gt; + &amp;lt;key&amp;gt;&lt;/code&gt;&lt;br /&gt;
Example: Move down 10 lines: &lt;code class=&quot;highlighter-rouge&quot;&gt;10 + j&lt;/code&gt;&lt;br /&gt;
&lt;strong&gt;Note&lt;/strong&gt;: Syntax supported by all navigation commands&lt;/p&gt;

&lt;h3 id=&quot;opening-files&quot;&gt;Opening Files&lt;/h3&gt;
&lt;p&gt;Fuzzy Search - Searches file names — &lt;code class=&quot;highlighter-rouge&quot;&gt;,t&lt;/code&gt;
To cancel: &lt;code class=&quot;highlighter-rouge&quot;&gt;Command&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;grepping&quot;&gt;Grepping&lt;/h3&gt;
&lt;p&gt;Global find (searches content of file in project) — &lt;code class=&quot;highlighter-rouge&quot;&gt;,a&lt;/code&gt;&lt;br /&gt;
The “current project” is whatever directory you &lt;code class=&quot;highlighter-rouge&quot;&gt;$ vim&lt;/code&gt; into&lt;/p&gt;

&lt;p&gt;Search within file: &lt;code class=&quot;highlighter-rouge&quot;&gt;\&amp;lt;keyword on page&amp;gt;&lt;/code&gt;
    * &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; goes to next
    * &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + N&lt;/code&gt; goes back&lt;/p&gt;

&lt;p&gt;Search and replace: &lt;code class=&quot;highlighter-rouge&quot;&gt;:%s/foo/bar/g&lt;/code&gt; (Replace &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; no confirmation. For confirmation, use &lt;code class=&quot;highlighter-rouge&quot;&gt;gc&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt; at end)&lt;/p&gt;

&lt;h3 id=&quot;highlighting-mode&quot;&gt;Highlighting mode&lt;/h3&gt;
&lt;p&gt;Highlighting an entire line: &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + V&lt;/code&gt;
Highlighting mode: &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt;
Copy/yank: &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt;
Paste: &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt;
Paste above: &lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + P&lt;/code&gt;
Pasting in insert mode (having copied using the operating system): &lt;code class=&quot;highlighter-rouge&quot;&gt;Command + v&lt;/code&gt;
Paste from clipboard with auto-indenting: &lt;code class=&quot;highlighter-rouge&quot;&gt;:set paste&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Command + V&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;panes&quot;&gt;Panes&lt;/h3&gt;
&lt;p&gt;Opening new panes, start with: &lt;code class=&quot;highlighter-rouge&quot;&gt;control + w&lt;/code&gt;:
    * &lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; is vertical split (focus on the new pane)&lt;br /&gt;
    * &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; is horizontal split&lt;br /&gt;
    * &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; makes all panes equal size&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Switch panes:&lt;/strong&gt;&lt;br /&gt;
Move up: &lt;code class=&quot;highlighter-rouge&quot;&gt;control + j&lt;/code&gt;&lt;br /&gt;
Move down: &lt;code class=&quot;highlighter-rouge&quot;&gt;control + k&lt;/code&gt;&lt;br /&gt;
Move left: &lt;code class=&quot;highlighter-rouge&quot;&gt;control + h&lt;/code&gt;&lt;br /&gt;
Move right: &lt;code class=&quot;highlighter-rouge&quot;&gt;control + l&lt;/code&gt;&lt;br /&gt;
Close all except current: &lt;code class=&quot;highlighter-rouge&quot;&gt;control + o&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;other&quot;&gt;Other&lt;/h3&gt;
&lt;p&gt;Undo: &lt;code class=&quot;highlighter-rouge&quot;&gt;u&lt;/code&gt;&lt;br /&gt;
Redo: &lt;code class=&quot;highlighter-rouge&quot;&gt;control&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;r&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Delete: &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; –&amp;gt; Format: &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;number (optional, default 1)&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;action&lt;/code&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;4&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;w&lt;/code&gt; would delete the four next words&lt;/p&gt;

&lt;p&gt;Creating new file from CL in VIM:
&lt;code class=&quot;highlighter-rouge&quot;&gt;$ vim &amp;lt;file-name&amp;gt;&lt;/code&gt;&lt;br /&gt;
Make sure you save before you quit using &lt;code class=&quot;highlighter-rouge&quot;&gt;:w&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Quitting: &lt;code class=&quot;highlighter-rouge&quot;&gt;:q&lt;/code&gt;&lt;br /&gt;
Quitting without saving (and not being prompted): &lt;code class=&quot;highlighter-rouge&quot;&gt;:q!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Using &lt;code class=&quot;highlighter-rouge&quot;&gt;easymotion&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
Easymotion is a plugin that allows you to quickly move through the current file by highlighting all possible next positions for your cursor and adding a hotkey to them. Instead of typing &lt;code class=&quot;highlighter-rouge&quot;&gt;/div&lt;/code&gt; and pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; to cycle through to the instance of &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt; that you’re looking for in your code, you can simply type &lt;code class=&quot;highlighter-rouge&quot;&gt;s&lt;/code&gt; to initiate the &lt;code class=&quot;highlighter-rouge&quot;&gt;easymotion&lt;/code&gt; grepping, &lt;code class=&quot;highlighter-rouge&quot;&gt;di&lt;/code&gt; as your two character query (configurable in &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; file), and type the key that is placed on the instance of what you’re looking for.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Commenting&lt;/strong&gt;&lt;br /&gt;
To comment a line you’ve highlighted, type &lt;code class=&quot;highlighter-rouge&quot;&gt;gc&lt;/code&gt;&lt;br /&gt;
To comment a line without highlighting, type &lt;code class=&quot;highlighter-rouge&quot;&gt;gcc&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;explorer&quot;&gt;Explorer&lt;/h3&gt;
&lt;p&gt;Opening up explorer:&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;:Explore&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;:Exp&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;Tab&lt;/code&gt; to complete it for you&lt;/p&gt;

&lt;p&gt;Navigation using &lt;code class=&quot;highlighter-rouge&quot;&gt;hjkl&lt;/code&gt;.&lt;br /&gt;
When opening a file:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Enter opens in same pane&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt; splits horizontally (opens below)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;v&lt;/code&gt; splits vertically (opens to the side)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; Up one level to parent&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gg&lt;/code&gt; - top of file/pane
&lt;code class=&quot;highlighter-rouge&quot;&gt;Shift + G&lt;/code&gt; - bottom
Go to line number: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Line #&amp;gt; + Shift + G&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;additional-plugins-and-customizations&quot;&gt;Additional Plugins and Customizations&lt;/h1&gt;
&lt;h3 id=&quot;all-plugins&quot;&gt;All Plugins&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;comment_vim&lt;/li&gt;
  &lt;li&gt;typescript-vim&lt;/li&gt;
  &lt;li&gt;vim-fugitive&lt;/li&gt;
  &lt;li&gt;supertab&lt;/li&gt;
  &lt;li&gt;tabular&lt;/li&gt;
  &lt;li&gt;rename.vim&lt;/li&gt;
  &lt;li&gt;goyo.vim&lt;/li&gt;
  &lt;li&gt;vim-vroom&lt;/li&gt;
  &lt;li&gt;auto_mkdir&lt;/li&gt;
  &lt;li&gt;ctrlp.vim&lt;/li&gt;
  &lt;li&gt;ag.vim&lt;/li&gt;
  &lt;li&gt;ctrlp-cmatcher&lt;/li&gt;
  &lt;li&gt;ack.vim&lt;/li&gt;
  &lt;li&gt;YouCompleteMe&lt;/li&gt;
  &lt;li&gt;indentline&lt;/li&gt;
  &lt;li&gt;vim-gitgutter&lt;/li&gt;
  &lt;li&gt;vim-airline&lt;/li&gt;
  &lt;li&gt;vim-multiple-cursors&lt;/li&gt;
  &lt;li&gt;vim-easymotion&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;languages&quot;&gt;Languages&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;vim-coffee-script&lt;/li&gt;
  &lt;li&gt;vim-elixir&lt;/li&gt;
  &lt;li&gt;vim-emoji&lt;/li&gt;
  &lt;li&gt;vim-rails&lt;/li&gt;
  &lt;li&gt;vim-javascript&lt;/li&gt;
  &lt;li&gt;vim-jsx&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;further-customizations&quot;&gt;Further Customizations&lt;/h1&gt;
&lt;h2 id=&quot;adding-a-plug-in&quot;&gt;Adding a Plug In&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Add the plugin to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.vimrc&lt;/code&gt; file:
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Plug 'Valloric/YouCompleteMe'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Source the file: &lt;code class=&quot;highlighter-rouge&quot;&gt;:source %&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Install the plugins: &lt;code class=&quot;highlighter-rouge&quot;&gt;:PlugInstall&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;suggestions&quot;&gt;Suggestions&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Change &lt;code class=&quot;highlighter-rouge&quot;&gt;caps lock&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;escape&lt;/code&gt; in System Preferecnes -&amp;gt; Keyboard -&amp;gt; Modifiers&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;in-development&quot;&gt;In Development&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Undo closing a pane (reopen last pane)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;faqs&quot;&gt;FAQs&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Does the mouse work? Yes!&lt;/li&gt;
  &lt;li&gt;Open VIM tutorial: &lt;code class=&quot;highlighter-rouge&quot;&gt;$ vimtutor&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;What does &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;C&amp;gt;&lt;/code&gt; map to? It maps to &lt;code class=&quot;highlighter-rouge&quot;&gt;Control&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Fri, 04 Aug 2017 13:18:02 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/08/04/my-custom-vim-configuration-installation-usage-and-capabilities.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/08/04/my-custom-vim-configuration-installation-usage-and-capabilities.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Introduction to VIM: Transitioning to Command Line Text Editing</title>
        <description>&lt;p&gt;I’m testing out VIM (contractions: “Vi IMproved”) — a command-line editor — to see if I should make the switch from Atom/Sublime to VIM. I’ve been using Sublime since I started developing in December of 2014 and I only recently picked up Atom my senior year of high school back in the fall of 2015. I’ve always enjoyed text editors and have had my fair share of GUI clients: Sublime 2, Atom, Brackets, XCode (although a bit different because it’s not for web), and a handful of others.
&lt;br class=&quot;post-line-break&quot; /&gt;
Up until now I’ve always argued that ext editors are much more useful than terminal editors because of their functionality, power, and customization; I was willing to look over their slow performance and limited upper-bound on configuration. Specifically for work-related projects, I have to develop and write code on my virtual machine in the cloud, meaning that I could either edit from the terminal or use an FTP plugin on Sublime/Atom (meaning I would have to manage double copies of everything). I decided that since it’s the summer, I’d have time to try out VIM and see if I want it to be daily driver during the school year because, I have to admit, it has its major benefits.
&lt;br class=&quot;post-line-break&quot; /&gt;
I didn’t want to start from scratch and thankfully my coworker, Steve Aragon, is a master at VIM and has been using it for the past two years or so. He has a base configuration that he got from a friend of his so I used his a base and added some of my own customizations.
&lt;br class=&quot;post-line-break&quot; /&gt;
I’ll probably end up doing a more in-depth post on my thoughts after using it extensively, but my initial thoughts have been fairly positive. The keystrokes take some getting used to. They’re so drastically different from my daily workflow that it’s difficult to adopt, but I can already sense it becoming more muscle memory. Keep in mind that I’ve been using VIM for probably 6 hours total now — much of which is for configuration — I don’t really have enough time logged to make an accurate review of my experience. I love how fast it is and the extensive customizations that I can make. There are plenty of handy plugins (I’m using &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;). I’m sticking with my usual iTerm 2 which is significantly faster than any visual text editor, especially Atom, and I’m able to modify the code on my dev box directly as opposed to syncing it from my local machine.
&lt;br class=&quot;post-line-break&quot; /&gt;
I’ll probably be fairly confident with my setup by the time school rolls around so I’m hoping I can start developing in VIM for all my personal, club, school, and work projects by the end of the summer. The learning curve is a bit steep, but once I’ve put in some practice I’m sure I’ll be faster than I was on Atom or Sublime. I think the difference is really that VIM is so malleable and lightweight that the you can keep pushing the upper bound of your macros, grepping, navigation speed, etc. — your productivity doesn’t ceiling out like it would on a normal text editor.
&lt;br class=&quot;post-line-break&quot; /&gt;
Check out my &lt;a href=&quot;http://localhost:4000/programming/2017/08/04/my-custom-vim-configuration-installation-usage-and-capabilities.html&quot;&gt;next blog post&lt;/a&gt; to see my personal VIM configuration — I’ve spent a fair amount of time messing around with it and I’m really enjoying it so far so definitely take a look if you’re at all interested.&lt;/p&gt;
</description>
        <pubDate>Thu, 03 Aug 2017 13:02:56 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/08/03/introduction-to-vim-transitioning-to-command-line-text-editing.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/08/03/introduction-to-vim-transitioning-to-command-line-text-editing.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>ES6 Tips and Tricks June 2017: Webpack Loaders, Regexes, and DNS Configuration</title>
        <description>&lt;h3 class=&quot;post-subheader&quot;&gt;Using Raw Files with Webpack&lt;/h3&gt;
&lt;p&gt;There are some files that are best used when imported as their raw contents. This includes, but is not limited to file extensions like: &lt;code class=&quot;highlighter-rouge&quot;&gt;.svg&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;.txt&lt;/code&gt;. For these situations, you must use the &lt;code class=&quot;highlighter-rouge&quot;&gt;raw-loader&lt;/code&gt; in your &lt;code class=&quot;highlighter-rouge&quot;&gt;webpack.config&lt;/code&gt; file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Load markdown as raw text&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;md/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;node_modules&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'raw-loader'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using an &lt;code class=&quot;highlighter-rouge&quot;&gt;.svg&lt;/code&gt; file in React:&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;svgData&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./image.svg'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/* React render() */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;loading&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dangerouslySetInnerHTML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Cleaning up Log Statements&lt;/h3&gt;
&lt;p&gt;Developers use &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; statements religiously — it’s the best way of debugging and tracking a browser or computer’s path through the code. One problem that arises is that &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; statements are accidentally left in, which doesn’t reflect well if the log statements are clearly debuggers, or simply left in commented out. When deploying to production, &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; statements should be removed. Because they permeate every corner of the project, I’ve found it’s easiest to remove them using regexes: Find &amp;amp; Replace. Here are the regexes for finding all lines with &lt;code class=&quot;highlighter-rouge&quot;&gt;console.log&lt;/code&gt; statements:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Commented out statements&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;\n *\/\/ console\.log\(.*\)&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Active statements&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;\n *console\.log\(.*\)&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Commented out or still active&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;\n *\/?\/? console\.log\(.*\)&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Common Regex Statements&lt;/h3&gt;
&lt;p&gt;I’ve started using regexes (regular expressions) more and more in my projects — specifically in Javascript — and I’ve found them very elegant and fun to use. I learned them briefly in class at school, but never really implemented them in full. My &lt;a href=&quot;https://devpost.com/software/sofly-scanner&quot;&gt;hackathon project&lt;/a&gt; did use a bit of natural language processing, however, it wasn’t to a huge scale. We mostly stuck to date and location parsing.
&lt;br class=&quot;post-line-break&quot; /&gt;
Here’s a simple email validation regex match statement in Javascript:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;validQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'email@test.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;invalidQuery&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'I am not an email address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Email regex from: https://stackoverflow.com/questions/46155/how-to-validate-email-address-in-javascript&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Notice: uses '/' instead of quotes&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailRegex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/^&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(([^&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;lt;&amp;gt;()&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\[\]\\&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;.,;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;@&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(\.[^&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&amp;lt;&amp;gt;()&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\[\]\\&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;.,;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\s&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;@&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;&quot;.+&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;((\[[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]{1,3}\.[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]{1,3}\.[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]{1,3}\.[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]{1,3}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\-&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;0-9&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\.)&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;a-zA-Z&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;]{2,}))&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;$/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emailRegex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;validQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emailRegex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;invalidQuery&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Getting the Current Directory in Javascript&lt;/h3&gt;
&lt;p&gt;It’s really important that you use a reliable path resolving system when configuring your web apps. Packages like &lt;code class=&quot;highlighter-rouge&quot;&gt;ExpressJS&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Webpack&lt;/code&gt; rely on file paths to build and serve up your app so it’s essential that the way you get your current directory is reliable. There are a handful of ways of getting your current directory and navigating through it:&lt;br /&gt;
&lt;strong&gt;Getting Directory&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Default: &lt;code class=&quot;highlighter-rouge&quot;&gt;__dirname // Often global — can simply access by calling this variable&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Using environment variables: &lt;code class=&quot;highlighter-rouge&quot;&gt;const __dirname = process.env.PWD;&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Navigating Files&lt;/strong&gt;:&lt;br /&gt;
Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;path&lt;/code&gt; library:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'path'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'./client/dist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Resolves the file path&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Modifying Local DNS&lt;/h3&gt;
&lt;p&gt;Computers can easily be configured to change the Domain Name System (DNS). What this means is that you can override and map certain IP addresses to different URL names. For example, at work, I develop on my own Dev Box — a section of a computer somewhere that hosts my files. Because Moat has hundreds of these, it’s not economical to buy a domain name for each box. Instead, they are left unnamed and can only be accessed from the browser using their public IP address. When I’m modifying code, I hook into their private IP addresses. Instead of typing in the exact IP address every time you want to view your code, which is long and can easily be butchered, you can modify your local DNS and map that specific IP address to a human-readable URL.
&lt;br class=&quot;post-line-break&quot; /&gt;
Navigate to &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/&lt;/code&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;$ cd /etc/&lt;/code&gt;) — notice it is prepended using a forward-slash, indiciating it is in the base directory. Next, open &lt;code class=&quot;highlighter-rouge&quot;&gt;hosts&lt;/code&gt; using VI, VIM, NANO, or any other text editor. Now modify that file using the following structure.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;IP&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;12.345&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;67.89&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;
&lt;span class=&quot;mf&quot;&gt;01.234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;56.78&lt;/span&gt;    &lt;span class=&quot;nx&quot;&gt;test1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;com&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Common IP Ranges&lt;/h3&gt;
&lt;p&gt;Private IPv4 address spaces (&lt;a href=&quot;https://en.wikipedia.org/wiki/Private_network&quot;&gt;Source&lt;/a&gt;)&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;RFC1918 name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;IP address range&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Mask bits&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;24-bit block&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10.0.0.0 - 10.255.255.25&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;8 bits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;20-bit block&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;172.16.0.0 – 172.31.255.255&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;12 bits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;16-bit block&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;192.168.0.0 – 192.168.255.255&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;16 bits&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
</description>
        <pubDate>Mon, 31 Jul 2017 12:50:16 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/07/31/es6-tips-and-tricks-june-2017-webpack-configuration-regexes-and-dns-configuration.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/07/31/es6-tips-and-tricks-june-2017-webpack-configuration-regexes-and-dns-configuration.html</guid>
        
        <category>es6</category>
        
        <category>javascript</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Design Notes July 2017: Useful Tools, Freelance, and Design Systems</title>
        <description>&lt;h3 class=&quot;post-subheader&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I’ve recently started talking to some designers at Moat — Vince Li and Josh Turk (Spelling?) [head of design at Moat] — and they’ve been giving me some really good insight into design at a big company as well as tools for myself to use. I’ve been working on the frontend Analytics engineering team, however, because of the size of the company, we do not do any design work. I’ve taken a liking to talking to designers to see what’s going on with their projects and any tips they might have for starting designers.
&lt;br class=&quot;post-line-break&quot; /&gt;
One of the pieces of advice that I’ve picked up at Moat and specifically with design is from Steve Jobs when he says: “Stay a beginner”. The premise of this is great for design but applies to many different aspects of life. It is the idea that you should remain constantly questioning and relearning. If you approach a problem as a beginner every time, you are bound to find improvements and issues with the current design.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Tools&lt;/h3&gt;
&lt;p&gt;I talked to Vince extensively about what tools he uses on a day to day for his designing. I mentioned to him that I wanted to get more into natural/organic designs like freehand with more intricate details. He uses the &lt;a href=&quot;https://us-store.wacom.com/Catalog/Pen-Tablets/Intuos-pro/wacom-intuos-pro#/undefined1&quot;&gt;Wacom Intuos Pro Medium&lt;/a&gt; and now uses it instead of a mouse. He highly recommends it for what I want to do, but he said that since the entry price is quite steep, it might be more economical to buy an iPad Pro. He let me use Moat’s iPad Pro since the design team hasn’t really gotten around to using it, and it’s been a really neat experience. I’ve been able to play around with some pretty cool apps and I’m currently debating if I can justify the also insanely high price. I’ll give it a couple weeks to see if I’m just going through a hype phase.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;b&gt;Useful Design Tools&lt;/b&gt;
“Spotlight” Sketch Plugin: &lt;a href=&quot;http://sketchrunner.com/&quot;&gt;Runner&lt;/a&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;About Freelance&lt;/h3&gt;
&lt;p&gt;Josh worked freelance for about a year and talked about how it’s different from a 9-5 job. He said that working as a designer in isolation is one of the hardest things about it. There’s no one to bounce ideas off of, brainstorm, or even give feedback on your work. He also recommended that freelance work, in general, should be intended to build a consistent stream of work. All too often, you can fall into the trap of building for many different clients with small tasks as opposed to building up a solid relation to a handful (he said about four) brands doing long term work. It’s better when you know the company you’re designing for well and it’s much more rewarding seeing the problem and solution play out over long periods of time. I’ll definitely keep it in mind moving forward seeing as freelance is something that I can imagine myself doing in the future.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Design Systems&lt;/h3&gt;
&lt;p&gt;Because of my current project at work and what I’ve experienced talking to designers recently, I really want to build my own design system/pattern/toolkit. Initially I wanted to build my own design system using the &lt;a href=&quot;http://bradfrost.com/blog/post/atomic-web-design/&quot;&gt;atomic design method&lt;/a&gt; — building buttons, fonts, icons, inputs, etc. that serve as atoms. These atoms then get stacked into molecules, which then stack into organisms, then templates, then finally to pages. It’s a really neat concept and I really want to do it eventually, but because I’m juggling 3 projects (with deadlines) and work right now, I just don’t think I’ll have the hours to devote to it. A more feasible endeavor would be a design pattern, a frontend framework, or a design toolkit — just a way of standardizing the way my buttons, headers, labels, icons, etc. look. Here are a couple of good reference examples:&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://blueprintjs.com/&quot;&gt;BlueprintJS&lt;/a&gt; - “React-based UI Toolkit”&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://patternlab.io/&quot;&gt;Pattern Lab&lt;/a&gt; — An atomic design system&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; — Frontend framework&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.lightningdesignsystem.com/&quot;&gt;Lightning Design&lt;/a&gt; - Salesforce’s Design System&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://material.io/&quot;&gt;Google Material Design&lt;/a&gt; - Google’s Design System&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://design-system.lostmy.name/&quot;&gt;Lost My Name Design System&lt;/a&gt; - A great, clean React-based design system&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 24 Jul 2017 07:49:12 -0400</pubDate>
        <link>http://khou22.github.io/design/2017/07/24/design-notes-july-2017-useful-tools-freelance-and-design-systems.html</link>
        <guid isPermaLink="true">http://khou22.github.io/design/2017/07/24/design-notes-july-2017-useful-tools-freelance-and-design-systems.html</guid>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>Getting Started with Typescript: Thoughts, Tips, and Useful Notes</title>
        <description>&lt;p&gt;I started using TypeScript for my next project at Moat and I have to say I really love it. I’ve always been a fan of type safe language — largely for the compile-time debugging, code completion, and readability — which is why I’m such a huge fan of Swift. TypeScript has given me the structure and safety that I’ve found with Java and Swift, and has reinvigorated my love for web development. I’ve always considered web development to be somewhat of the “wild west” — not too much standardization and with no checks and balances to minimize errors.&lt;/p&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Benefits&lt;/h3&gt;
&lt;p&gt;Using TypeScript has eliminated a whole category of bugs that would be present in traditional Javascript. I’m using &lt;code class=&quot;highlighter-rouge&quot;&gt;atom-typescript (v11.0.6)&lt;/code&gt; which includes a live linter that checks my code on “compile” rather than during runtime. Because of this, my development time (after I got the hang of some syntax complications) was significantly increased. I no longer had unexpected types, undefined variables, and missing properties on objects. TypeScript can track the type of variables to ensure that functions always receive their specified inputs, variables don’t change types unless explicitly allowed, and code doesn’t attempt to access object attributes that aren’t actually there (also helps with spelling mistakes).&lt;/p&gt;

&lt;p&gt;It has huge benefits with scalability because of the code clarity and readability. Deciphering poorly written code is a nightmare, but if it had type safety, using the interfaces alone would provide a good map of what’s going on. Furthermore, you wouldn’t have to spend ten minutes to trace the shape of the return object on a function. Team members could better understand the input and output of your code making compartmentalization and modulation a lot easier and more natural.&lt;/p&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Drawbacks&lt;/h3&gt;
&lt;p&gt;One of the major drawbacks to TypeScript is efficiency. For small scale projects without many complicated objects and nested types, TypeScript might slow your development time down. TypeScript excels in complicated projects where you or a team member must use a complicated object with doubly nested arrays, objects, and dictionaries. This is where knowing exactly what variables you will have at your hands is a lifesaver.&lt;/p&gt;

&lt;p&gt;TypeScript can also be annoying when the type you expect to receive either doesn’t or varies. Even though you can “turn off” type safety by either not declaring a type or using &lt;code class=&quot;highlighter-rouge&quot;&gt;any&lt;/code&gt; as the type, it’s still annoying when the linter complains about something that isn’t really within your control.&lt;/p&gt;

&lt;p&gt;I’m sure I’ll find many more annoyances after I’ve gotten deeper into it. After all, I’ve only been using it for about a day so I’m probably naive and buying into the initial hype. Regardless, I’m having fun with TypeScript and opinions are better than no opinions.&lt;/p&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Interfaces&lt;/h3&gt;
&lt;p&gt;I recognized TypeScript’s true power when I was setting up interfaces. Interfaces are like kind of like Structures in Swift without the variable declaration. They do not contain variables or values. Instead, they essentially map out an object’s shape. For example, I’ve been playing around with GitHub’s API for a project and here are two of my interfaces:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Declare shape of repository&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GitHubRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;GitHubFile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, I can use GitHubFile or GitHubRepository as a type just like I would with any other variable type. I have the added benefit of code completion now. When I type a variable name of type GitHubFile and press period, a list of properties and their expected type shows up. It enables IDE’s to be much smarter about their suggestions to the point where it’s honestly approaching Xcode level.
&lt;img src=&quot;./../../../../media/blog/images/TypeScript-Intro/atom_code_completion_typescript.png&quot; class=&quot;iPhone-screenshots-large&quot; /&gt;&lt;/p&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Basic Syntaxes&lt;/h3&gt;
&lt;p&gt;&lt;b&gt;Arrays:&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;Functions:&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getReadme&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GitHubFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;Casting:&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;random&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;Defining Generics:&lt;/b&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// A promise function that declares a GitHubFile as the promise response&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Promise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GitHubFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;Overall, I’ve been very satisfied with TypeScript so far. The combination of code completion, reduced debugging time, and clean structure has made for a hugely satisfying development process. I’m thinking about refactoring my NodeJS Heroku server to TypeScript just so I can keep using it. Hope this post was helpful and I highly recommend you give TypeScript a shot!&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Jul 2017 13:40:33 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/07/14/getting-started-with-typescript-thoughts-tips-and-useful-notes.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/07/14/getting-started-with-typescript-thoughts-tips-and-useful-notes.html</guid>
        
        <category>javascript</category>
        
        <category>es6</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Testing APIs: Postman, Network Debugging, and JSON</title>
        <description>&lt;h1 id=&quot;postman-and-network-debugging&quot;&gt;Postman and Network Debugging&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://www.getpostman.com/&quot; target=&quot;_blank&quot;&gt;Postman&lt;/a&gt; is a clean, powerful tool to test APIs with custom configurations to suit your API’s needs. You can choose everything from the types of request (GET, POST, etc.) and the authorization type, to cookies and header data. It includes a great UI for displaying the body of the response as raw, pretty/formatted, or as a web page. It supports tests, pre-request scripts, and useful organization tools that help you manage requests you’ve previously made.
&lt;br class=&quot;post-line-break&quot; /&gt;
I’ve been doing a lot of server work both at Moat and on my personal time. I’ve been using Postman a lot so I figured I’d share a couple of useful tips I’ve come to learn.
&lt;br class=&quot;post-line-break&quot; /&gt;
The authentication features are great for public APIs and APIs with basic levels of security, however, many APIs rely on session cookies — bits of data that tell the browser that the user is signed in and has access to the site. At first, I attempted to manually cookies to the Postman request cookies input, but I believe I left out a couple and may have had some syntax errors because my requests would bounce back empty.
&lt;br class=&quot;post-line-break&quot; /&gt;
I did some digging online and found that there’s a really neat developer tool in Chrome for this exact thing. I’ve been using the Network developer tool in Chrome religiously these past couple weeks. They display information like response time, headers, etc. — pretty much anything you could need related to an API request. Unfortunately, I find the user interface somewhat confusing and it only handles information about the request. It can’t actually call a request. Like any developer, I have to make hundreds of calls to the same endpoint, often with the same data, over and over again even after the simplest of changes. For my project at work, triggering the API required over three clicks and filling out a form before the API was even called. Doing this every time I wanted to run a POST request was a huge pain and I didn’t have time for it. Instead, I discovered that the Chrome Network Tool compiles the request as a cURL command. For those that don’t know, a cURL command is a Command Line tool to make network requests. They’re somewhat hard to format and write out for convoluted network calls, but they’re a standard in the industry. Chrome allows you to copy the request as a cURL ready to be run from the command line! To do this, open the developer tool, click the network tab, run the API (the network tab must be open when the request is made for it to record), then right click the request and select “Copy → Copy as cURL”.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;img src=&quot;./../../../../media/blog/images/API-Testing/Chrome_Copy_cURL.png&quot; class=&quot;iPhone-screenshots-large&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
You can then run this command in the terminal by simply pasting the cURL into the prompt and pressing enter. This method is great for some testing like pinging a server and reading server print statements, but because I was more concerned with the request responses, I had to deal with large JSON objects — which Postman does a good job with.
&lt;br class=&quot;post-line-break&quot; /&gt;
Fortunately, Postman has a useful feature that allows users to import and export cURL commands. Make sure the cURL is still copied to your clipboard and navigate to your Postman window. In the top left corner, click the “Import” button and a modal should display. Click on the “Past Raw Text” option and past the cURL command in the text area.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;img src=&quot;./../../../../media/blog/images/API-Testing/Postman_Import_cURL.png&quot; class=&quot;iPhone-screenshots-large&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
Postman will import the cURL request with all the options, cookies, etc. and automatically create the API request for you! It’ll essentially duplicate the request the browser made, except in a much better UI. Now you can use all the wonderful Postman features with any network request!
&lt;br class=&quot;post-line-break&quot; /&gt;
I haven’t run into a situation where this doesn’t work (at least with cache-based login sessions) and I’m hoping it’s a catch all. I highly recommend this method for anyone dealing with server development. If you’re still using the browser to ping your API endpoints, I guarantee that it’ll speed up your workflow.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;dealing-with-json&quot;&gt;Dealing with JSON&lt;/h1&gt;
&lt;p&gt;JSON, along with some of its cousins like XML, is one of the data formats that serves as the bridge between programming languages. You can think of it as the glue that holds the Internet together. When called, API’s will return data — often in JSON format — for the site’s Javascript to parse through. Because JSON isn’t anything more than a specifically formatted String, it can be used pretty much universally.
&lt;br class=&quot;post-line-break&quot; /&gt;
As I’ve mentioned earlier, I’ve been working with massive JSON objects often — sometimes with thousands of entries in nested arrays. Debugging large, plain JSON text as a String is a nightmare. I’ve found a useful Chrome extension called JSON Viewer that automatically determines if the contents of the browser is valid JSON data and provides you with some useful tools to organize the information.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;img src=&quot;./../../../../media/blog/images/API-Testing/Raw_JSON_Bad.png&quot; /&gt;
&lt;em&gt;JSON With No Formatting&lt;/em&gt;
&lt;br /&gt;
&lt;img src=&quot;./../../../../media/blog/images/API-Testing/JSON_Viewer_Extension.png&quot; class=&quot;iPhone-screenshots-large&quot; /&gt;&lt;br /&gt;
&lt;em&gt;JSON With Formatting&lt;/em&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
It turns the page into a text editor of sorts and you can compress objects and arrays very easily. It’ll use syntax highlighting and you can customize the font, text size, and more. Overall, just makes the process of looking at JSON much more enjoyable (restoring the romance in data if I may). It’s really useful when you want to compare two different objects that are separated by a massive, nested array. You can simply compress the array and it becomes infinitely cleaner to look at.&lt;/p&gt;
</description>
        <pubDate>Sat, 01 Jul 2017 13:06:18 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/07/01/testing-apis-postman-network-debugging-and-json.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/07/01/testing-apis-postman-network-debugging-and-json.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>NPM Basics June 2017: Creating an NPM Project</title>
        <description>&lt;h1 id=&quot;create-an-npm-environment&quot;&gt;Create an NPM Environment&lt;/h1&gt;
&lt;p&gt;First, you need to create an NPM environment for your library so that NPM knows what dependencies and scripts are associated with the library. Run:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Follow the instructions and it’ll attempt to create a proper package.json for your project.&lt;/p&gt;

&lt;h1 id=&quot;installing-dependencies&quot;&gt;Installing Dependencies&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install --save react-redux&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install --save-dev babel-core&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Global installation&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm install -g eslint&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;useful-dev-tools&quot;&gt;Useful Dev Tools&lt;/h1&gt;
&lt;p&gt;Linter: Check for coding errors — saves a trip to the browser (Airbnb’s linter is useful)
Webpack: For building and compiling JSX, ES6, etc. It will create static site with the option to serve it up locally on the localhost.&lt;/p&gt;

&lt;h1 id=&quot;use-github-repo-as-the-public-npm-package&quot;&gt;Use GitHub Repo as the Public NPM Package&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;npm i git://github.com/user/project.git#commit-ish --save&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;File structure of GitHub repo if you want to use it as a public package:
library-name/
    demo/
    dist/
    src/&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Jun 2017 06:17:34 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/06/27/npm-basics-june-2017-creating-an-npm-project.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/06/27/npm-basics-june-2017-creating-an-npm-project.html</guid>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>ES6 Tips and Tricks June 2017: Imports, Functions, and More</title>
        <description>&lt;p&gt;I am writing this blog post because I am, again, using ES6 for my internship. I was first exposed to this variation of Javascript during my very first internship at Salesforce back in Summer 2015. It feels like a long time ago and I’ve come a &lt;em&gt;long&lt;/em&gt; way since then. I am approaching ES6 with new awareness and sharper critical thinking. I felt it was useful to document some of the neat tricks I found with ES6 during my first month of my internship at Moat. A lot of this is partially review — a chance for me to shake the rust off and really solidify my skills in ES6.&lt;/p&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Concatenation&lt;/h3&gt;
&lt;p&gt;One strange thing that I’ve noticed is that some ES6 linters do not allow you to concatenate Strings using the normal ‘+’ operation. They also don’t allow you use double quotes and force you to stick to single quotes when hard coding Strings. I’m not entirely sure why this is the case and I haven’t had time to look it up yet, but I think it has something to do with the way the compiler transforms the ES6 into static ES5 files for the browser. My guess is that the compiler needs to use double quotes and doesn’t want the code to mess with its compile scripts/process. Anyways, here’s a new way you can concatenate:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'154'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Notice the single quotes&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// When concatenating, use the &quot;\`&quot; quotation mark (normally shares the same key as the '~')&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This works with any String convertible data type&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data_table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Result: &quot;/data_table?id=154&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Updating a Few Properties in an Object&lt;/h3&gt;
&lt;p&gt;This will allow you to return a deep copy of your object without having to write out every single property value. It’s really useful when you’re updating a state in React or Redux.&lt;br /&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;propertyToUpdate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;previousState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;propertyToUpdate&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Event Handler&lt;/h3&gt;
&lt;p&gt;I came across this useful tidbit when using the &lt;a href=&quot;https://github.com/JedWatson/react-select&quot; target=&quot;_blank&quot;&gt;React-Select&lt;/a&gt; library for my project at work. It is an open source, purely React dropdown list that I would definitely recommend to anyone in need of a dropdown. I was attempting to customize the main component and found a property called arrorRender with the usage description: “Renders a custom drop-down arrow to be shown in the right-hand side of the select: arrowRenderer({ onMouseDown, isOpen })” I’m familiar with event handlers, but I had never seen this style of documentation before. What this means, is that the arrowRenderer is a function that returns a DOM node to be used in place of the default arrow icon. The function takes an object input with the properties onMouseDown and isOpen so that there can be more complex renderings. Here was my rendering function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Custom dropdown icon for React-Select&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;arrowRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dropdownArrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/path/to/image'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Dropdown arrow&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchIcon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/path/to/image'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Magnifying glass&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;imgURL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isOpen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;searchIcon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dropdownArrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Determine which to use&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;imgURL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;100%&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;presentation&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/span&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this function, I am using the isOpen state to choose which image icon to render in the select input. You may not have seen this notation before and it’s definitely useful to remember.
&lt;br class=&quot;post-line-break&quot; /&gt;
Another useful event handler is the ‘input’ tag’s built in onBlur() event that triggers when the user removes focus from the input element. Like the onFocus() handler, onBlur() can be assigned to a custom function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// The event handler function&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;update&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'I'&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ve&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;been&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;triggered&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- The HTML --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autoComplete=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autoCorrect=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;off&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;spellCheck=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;className=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;select2-input&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onFocus=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{update}&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onBlur=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{update}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Preserving 'this' When Using React Props&lt;/h3&gt;
&lt;p&gt;In ES6, ‘this’ is not generally preserved which leads to some difficult workarounds when passing functions from one component to its children. Luckily, there is a technique that can be generally applicable to most situations that solves this issue. Many linters prevent the use of ‘.bind(this)’ so that is off the table. However, the block statement function ensures that ‘this’ pertains to the right scope. It is especially useful when you have to pass variables in as inputs. Here is an ES6 React example of this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SomeComponent&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 'this' refers to the component rather than the window&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;someState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;Good&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Example&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;work&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;This&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;won&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'t preserve '&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;will&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crash&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Wed, 14 Jun 2017 13:50:35 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/06/14/es6-tips-and-tricks-june-2017imports-functions-and-more.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/06/14/es6-tips-and-tricks-june-2017imports-functions-and-more.html</guid>
        
        <category>es6</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>Intro to Redux: Getting Started with State Containers in React</title>
        <description>&lt;h1 id=&quot;overview-of-redux&quot;&gt;Overview of Redux&lt;/h1&gt;
&lt;p&gt;Redux is a way of keeping all states consolidated in one master, global javascript object (called a Redux tree) and accessed using a store. In order to understand the basics, it is important to recognize the difference between pure and impure functions. Pure functions have no observable side effects on the database or server; in fact, the return values depend solely on the values of the arguments. If you put in the same arguments, you should get the exact same output every time. An impure function does not do this. It may modify the DOM or change a database.&lt;br /&gt;
&lt;em&gt;Sidenote: You can deep freeze your input variable to ensure that your function is pure&lt;/em&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
State changes will result in a callback called the reducer function. It is imperative that this function be a pure function and it must return a new object, &lt;em&gt;not a reference to the input&lt;/em&gt;. In most cases, you do not need to recreate the entire object. You can keep the references to the objects properties, but the master reference must be different — just change the variable(s) that need to be changed.&lt;br /&gt;
&lt;em&gt;Sidenote: You can use an expect(…).toEqual(…) to debug in Javascript. They act like Java assertion statements&lt;/em&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
It is also important that the reducer functions consider all possible inputs of an action. By convention, undefined inputs will return the initial statement. A reducer accepts a state and an action. In the following implementation, here are a few important redux API’s to keep in mind:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;store = createStore(instanceVarToUpdate) lets Redux know which instance to watch&lt;/li&gt;
  &lt;li&gt;store.getState() → get value of variable&lt;/li&gt;
  &lt;li&gt;store.subscribe(() =&amp;gt; { … }); // Callback when variable changes — does not run during the initial state&lt;/li&gt;
  &lt;li&gt;store.dispatch() → A function call that triggers an action manually
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;There are a few main pieces when implementing Redux with ReactJS. It centers around the ‘store’ or class that controls the global instance variables. In this explanation, we will use a simple counter as the example store. It simply tracks a number and has two API endpoint actions: increment by one, decrement by one.&lt;/p&gt;

&lt;p&gt;First, we must write out a simple React component so that we have something to connect our redux store to. Install the React NPM package so that we can use the framework.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install --save react&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we must create the controller (written in ES6).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Import the React NPM package&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// React Component&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Rendering function&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onIncrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onDecrement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we will see later, we will pass in the value of the counter and two functions (increment and decrement) from the store we will eventually create.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
To set up our store, we must first install redux and use the –save option to include it in our package.json:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install --save redux&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
Now we must write the code for the store itself. The store is actually an object type generated running the createStore() function in the redux package on a class. The code is included below. Notice how the function accepts an action and does not actually modify the state — it is a &lt;strong&gt;pure&lt;/strong&gt; function. In this example, the state is the value of the counter and it is initially set to 0. It is written in ES6.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// counterStore.js&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;redux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Get the createStore export&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Setup the Redux instance&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Initially at 0&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Feedback&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Use a switch to determine what action to take&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'INCREMENT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DECREMENT'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Use the function above as the callback and generate a store type&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Export the store so that it can used in other files&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
Next, we will link the store with our React class so that it can dynamically update the frontend. We include the store as a local variable in the file using the require() statement:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./counterStore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Side Note: In ES6, you can include exports from other JS files using brackets or no brackets. If there is a default export statement in the file, you do not have to use brackets and any import statement will simply load the default export as the variable name you specified. If you do not have a default export, want to access a number of different exports, or want to access a specific export, you must use the brackets and use the exact name of the export. (&lt;a href=&quot;https://stackoverflow.com/questions/36795819/when-should-i-use-curly-braces-for-es6-import/36796281&quot;&gt;citation&lt;/a&gt;)&lt;/em&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
Now we will create a rendering function, using ReactDOM to inject our HTML into the DOM.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./style.css&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Include CSS stylesheet&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Include React&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDom&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;react-dom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ReactDOM to load our component into the page&lt;/span&gt;

&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Get our Counter React component&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;./counterStore&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Don't use brackets because it is the default export&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Render function so that we can set it as a callback every time the store variable instance is modified&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// We are also passing in the counter value and increment/decrement functions&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The component is rendered in the element with the id: 'main'&lt;/span&gt;
&lt;span class=&quot;kr&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ReactDom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Counter&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;onIncrement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'INCREMENT'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;onDecrement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dispatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'DECREMENT'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;sr&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;    &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'main'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Subscribe to the live updates&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// This will run the function 'render' every time the store encounters a change&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Call it once manually to push it into the DOM because it will only render on a change&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// If we don't manually call it, there can be no changes to put it in the dom in the first place&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;closing-comments&quot;&gt;Closing Comments&lt;/h1&gt;
&lt;p&gt;Hope you were able to follow this brief tutorial! It is loosely based on the free course on egghead.io on &lt;a href=&quot;http://webpack.github.io/docs/tutorials/getting-started/&quot; target=&quot;\_blank&quot;&gt;Redux and React&lt;/a&gt;. The full code can be found &lt;a href=&quot;https://github.com/khou22/NodeJSPractice/tree/master/Redux&quot; target=&quot;\_blank&quot;&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Jun 2017 06:26:07 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/06/13/intro-to-redux-getting-started-with-state-containers-in-react.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/06/13/intro-to-redux-getting-started-with-state-containers-in-react.html</guid>
        
        <category>reactjs</category>
        
        
        <category>Programming</category>
        
      </item>
    
      <item>
        <title>HackPrinceton 2017: SoFly — An iOS App to Scan Flyers on Campus</title>
        <description>&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Earlier in April, a friend and I participated in HackPrinceton, Princeton University’s semi-annual hackathon that brings students from all around the country together for 36 hours. We built SoFly — an iOS app that scans flyers and lets the user share the event, create a calendar event, find the Facebook event, etc. The judges really liked it and it won runner up for the best app for Princeton Students!
&lt;br class=&quot;post-line-break&quot; /&gt;
I was responsible for the design, frontend, and implementing the OCR (Optical Character Recognition) processing. My partner dealt with the natural language processing to extract the event name, date, etc. from the raw text. I used Sketch to design the UX and Xcode/Swift 3 to code the frontend. We used Tesseract — Google’s OCR engine.
&lt;br class=&quot;post-line-break&quot; /&gt;
Check out the Devpost submission &lt;a href=&quot;https://devpost.com/software/sofly-scanner&quot;&gt;here&lt;/a&gt;.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;video-demo&quot;&gt;Video Demo&lt;/h1&gt;
&lt;iframe src=&quot;https://player.vimeo.com/video/211174699&quot; width=&quot;100%&quot; height=&quot;500px&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;
&lt;p&gt;The motivation for our application came when we realized how much our college uses flyers to advertise events. From dance recitals, to scientific talks, events are neatly summarized and hung on campus in visible areas. A huge part of our sense of community comes from these events, and as excursions into Princeton township have shown us, events planned in non-centralized communities rely on flyers and other written media to communicate activities to others. Both of us have fond memories attending community events growing up, and we think (through some surveying of our student body) that a cause of decreased attendance at such events is due to a few factors.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;People forget. Its not a flyer they can always take with them, and so what they think is instantaneously exciting soon fades from their memory.&lt;/li&gt;
  &lt;li&gt;It is not digital – in a world where everything else is.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;design&quot;&gt;Design&lt;/h1&gt;
&lt;p&gt;The primary concerns for the design were largely speed and usability. Flyers are already something that people ignore because it takes too long to absorb and memorize the information. We had to create an experience that would be as painless as if you just glanced at the flyer and faster than it would take to add the event to your calendar manually. This goal made the design largely a user-experience challenge as opposed to simply making it look good. It was a lot of fun playing around with various user flows and animations.
&lt;br class=&quot;post-line-break&quot; /&gt;
I think the finished product ultimately hit it on both the usability and aesthetic fronts. I put in a lot of effort into the animations (see the video above). Little things from the camera flash on the splash screen to the “scanning” loading animation took all my skill and creativity as an iOS developer to implement. It was really exciting when the finished product looked polished after only 36 hours!
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;screenshots&quot;&gt;Screenshots&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;./../../../../media/projects/soFlyScanner/splash_screen.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/soFlyScanner/camera_screen.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/soFlyScanner/loading_screen.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/soFlyScanner/generated_content.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;
&lt;p&gt;The application uses Optical Character Recognition techniques (along with Otsu’s method to preprocess a picture, and an exposure and alignment adjustment algorithm) to extract a dump of recognized text. This text is error prone, and quite messy, and so we use canonical Natural Language Processing algorithms to tokenize the text, and “learn” which terms are important. The Machine Learning component in this project involves a Naive Bayesian Classifier, which can categorize and weight these terms for (as of now) internal use. This compared with a “loose NFA” implementation (we coined the term to describe an overly general regex with multiple matches) whose matches were processed using an algorithm that determined the most probable match. From the flyers we extract date, time, location, and our best guess at the title of the text. We made a design choice to limit the time our OCR took, which leads to worse holistic text recognition, but still allows us to extract theses fields using our NLP methods.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;challenges&quot;&gt;Challenges&lt;/h1&gt;
&lt;p&gt;There were a lot of challenges that we had to work through on this project. Optical Character Recognition, Machine Learning, and Natural Language Processing are all open fields of research, and our project drew on all of them. Not only was the debugging process brutal, but the implementation was not as seamless as we would’ve liked.
&lt;br class=&quot;post-line-break&quot; /&gt;
Because Tesseract is not intended for mobile use and not built for images (it is used by Google to scan Google Books/PDFs — ie. “clean” documents), we ran into a lot of issues. In retrospect, Tesseract was not a great choice for an OCR library, but because of our time constraint, we didn’t have enough time or people to create an AWS server. Tesseract’s one huge advantage is that it works completely offline. For our next version, we are hoping to build an AWS server to access more powerful OCR services and only use Tesseract if the user doesn’t have an Internet connection.
&lt;br class=&quot;post-line-break&quot; /&gt;
Another challenge we ran into was in the pre-processing of an image. I hadn’t worked with UIImages (Swift’s image data type) all that much before this project and it was really difficult manipulating images so that Tesseract could produce the best and most accurate results. The most helpful pre-processing ultimately ended up being the binary translation of the image. The algorithm would turn the image into black/white pixels based on the amount of color around each pixel. This technique worked really well because it allowed the text to be more readable against the background.
&lt;br class=&quot;post-line-break&quot; /&gt;
Other problems we encountered include extracting the name of the event, extracting the organization involved, reading text against a busy background, and much more. We’re hoping that a lot of these issues are solved when we use a stronger OCR service.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;All in all, it was a very successful hackathon! As we were both freshman, we were definitley the underdog in this hackathon and we made a name for ourselves! Some professors became interested in our project and want us to build it out so that students can actually use it! We will likely spend the summer completing the project so that come fall, it will be widely used on campus! It was really exciting and well worth the lack of sleep. Check out the Devpost submission &lt;a href=&quot;https://devpost.com/software/sofly-scanner&quot;&gt;here&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sun, 09 Apr 2017 07:56:00 -0400</pubDate>
        <link>http://khou22.github.io/programming/2017/04/09/hackprinceton-2017-sofly-an-ios-app-to-scan-flyers-on-campus.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2017/04/09/hackprinceton-2017-sofly-an-ios-app-to-scan-flyers-on-campus.html</guid>
        
        <category>ios</category>
        
        <category>swift</category>
        
        
        <category>Programming</category>
        
      </item>
    
  </channel>
</rss>
