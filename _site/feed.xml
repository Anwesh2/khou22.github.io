<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Hou&#39;s Blog</title>
    <description>A blog about programming, wood, and anything that comes to my mind. Enjoy.
</description>
    <link>http://khou22.github.io/</link>
    <atom:link href="http://khou22.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 10 Jul 2016 13:18:48 -0700</pubDate>
    <lastBuildDate>Sun, 10 Jul 2016 13:18:48 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>WWDC 2015: Mysteries of Auto Layout</title>
        <description>&lt;p&gt;Mysteries of Auto Layout, Part 1: &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015/218&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/videos/play/wwdc2015/218&lt;/a&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Auto Layout Definition: Constraints lead to equations that layout your views automatically&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Maintanable Layouts&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Stack View - new to iOS 9&lt;/li&gt;
  &lt;li&gt;Arrange views linearly, vertically&lt;/li&gt;
  &lt;li&gt;Manages constraints of your subviews&lt;/li&gt;
  &lt;li&gt;Horizontal or vertical&lt;/li&gt;
  &lt;li&gt;&lt;ul&gt;Stack Views are basically for grouping elements together
    &lt;li&gt;Distribution property - can distribute across the axis&lt;/li&gt;
    &lt;li&gt;Example: Fill, fill equally, fill proportionally, etc.&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;&lt;ul&gt;Stack View options:
    &lt;li&gt;Axis: Vertical/horizontal&lt;/li&gt;
    &lt;li&gt;Alignment: Fill (spread itself across entire space)/leading/center/leading&lt;/li&gt;
    &lt;li&gt;Spacing (spacing between elements)&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;Can stack within Stack Views&lt;/li&gt;
  &lt;li&gt;After everything is stacked within the same Stack, can add constraints so it correctly fills the superview&lt;/li&gt;
  &lt;li&gt;Control drag from Stack View to superview to add new constraints that will pin it to the screen edge&lt;/li&gt;
  &lt;li&gt;New options: Content hugging priority, content compression resistance priority&lt;/li&gt;
    &lt;li&gt;&lt;ul&gt;Can resist changing sizes (useful for things like tab menus, buttons, etc.)&lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;Start with Stack View, use constraints as needed&lt;/li&gt;
&lt;ul&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Changing Constraints&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t add/remove constraints&lt;/li&gt;
  &lt;li&gt;Instead, activate and deactivate constraints&lt;/li&gt;
  &lt;li&gt;&lt;ul&gt;Never deactivate self.view.constraints
    &lt;li&gt;Weird things will happen&lt;/li&gt;
    &lt;li&gt;Keep references to constraints you need, don’t just blindly deactivate all of them&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;Can animate constraints&lt;/li&gt;
  &lt;ul&gt;&lt;li&gt;Use self.view.layoutIfNeeded&lt;/li&gt;&lt;/ul&gt;
&lt;/ul&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Create size constraints programmably&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;intrinsicContentSize = automatically makes the size constraint the same size as the content within the view&lt;/li&gt;
  &lt;li&gt;Use proportions — will likely be more successful&lt;/li&gt;
  &lt;ul&gt;&lt;li&gt;Don’t use points&lt;/li&gt;&lt;/ul&gt;
&lt;/ul&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Constraint Priorities&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t set a constraint as “required”&lt;/li&gt;
  &lt;li&gt;Don’t use equal priorities&lt;/li&gt;
  &lt;li&gt;&lt;ul&gt;Set priorities a little higher or lower than the defaults:
    &lt;li&gt;Scale from: 1-1000&lt;/li&gt;
    &lt;li&gt;Low: 250&lt;/li&gt;
    &lt;li&gt;High: 750&lt;/li&gt;
  &lt;/ul&gt;&lt;/li&gt;
  &lt;li&gt;This is good for localization — stretching UILabels, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;&lt;/ul&gt;
</description>
        <pubDate>Fri, 01 Jul 2016 09:33:27 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/07/01/wwdc-2015-mysteries-of-auto-layout.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/07/01/wwdc-2015-mysteries-of-auto-layout.html</guid>
        
        <category>ios</category>
        
        <category>swift</category>
        
        <category>apps</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Digital Design: The Process from Concept to iOS App</title>
        <description>&lt;p&gt;This is my second week working at Breathometer, a startup that builds breath analysis devices to help users better understand their health. We are nearly finished with Mint — a device that measures various chemical levels in your breath to give you an overall oral hygiene report. Another device, called Slim, measures the amount of acetone in your breath and uses it as a metric to calculate the amount of fat your body is burning.
&lt;br class=&quot;post-line-break&quot; /&gt;
The development stages of Mint are essentially complete, but Slim is still in the development process. As a frontend developer and designer, I’ve been assigned the role of creating the onboarding user flow. Because I’ve never had any formal training or business-level experience in design, my design process can most definitely be improved. I met with my manager and mentor today to discuss this project, and we’ve decided that the most valuable course of action for me is to go through the entire design process correctly, so that I can internalize it for the future. I’ve done some preliminary research, and the steps are as outlined below.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Low Fidelity&lt;/h3&gt;
&lt;p&gt;In order to conceptualize and put thoughts into something tangible, I used low-fidelity designs. Low-fidelity prototyping is often the first step when designing and allows you to quickly explore ideas. According to the site, &lt;a href=&quot;https://www.usability.gov/how-to-and-tools/methods/prototyping.html&quot; target=&quot;_blank&quot;&gt;usability.gov&lt;/a&gt;, low-fidelity communicates are typically either sketches or wireframes. These are intended to lay out potential ideas to pursue while also conveying the structure and overall flow. These two stages are often considered the ideation and concept validation points in the design process.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;High Fidelity&lt;/h3&gt;
&lt;p&gt;After many cycles of low-fidelity designs, I finally arrive at an overall idea that resonates with me. I can now take the quick, generally black and white, as well as conceptual-focused sketches and wireframes, migrating them over to what are called high-fidelity designs. The designs still evolve, but the overall motif remains largely the same. High-fidelity designs are meant to add “color” to your designs in both a literal and figurative sense. They are no long static, one-pagers. Instead, they accurately represent the entire product — every screen is generally accounted for and a functional UI is sometimes implemented. While buttons and API calls are likely not active, the general user flow and UX can be seen.
&lt;br class=&quot;post-line-break&quot; /&gt;
High-fidelity designs begin in software programs like Sketch, then move to other rapid prototyping tools to gain that barebones functionality. From experience, it is very important that nearly every aspect of the design be reflected in your high-fidelity designs, at the very least in Sketch. As both a designer and software developer, it is much easier to collaborate and quickly build an MVP when all the frontend components are laid out in full view. Rather than coming up with hex values, widths, etc. on the fly, all properties should be known by the end of the high-fidelity design stage. It not only makes the engineer’s life much easier, but also the designer’s.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Visual&lt;/h3&gt;
&lt;p&gt;Here is a chart that appropriately sums up the progression from low to high-fidelity designs in relation to functionality.&lt;br /&gt;
&lt;img src=&quot;http://www.uxmatters.com/mt/archives/2010/05/images/wireframe_fig1.jpg&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Animations&lt;/h3&gt;
&lt;p&gt;Animations are the final step in the digital design process. There’s many different methods in approaching animations — mainly the timing in which the designing takes place. Animations can be a part of the high-fidelity stage or simply a part of the development process. My coworker explained it to me from the lens of a developer and designer. Based on his experience, it’s easier to implement animations while he is building the app, rather than when he is designing.
&lt;br class=&quot;post-line-break&quot; /&gt;
Many of the complex and intriguing animated designs you see online are generated in animation software with little regard to the capabilities of the developer. This is both good and bad in the sense that it allows for free creative thinking, but it can be next to impossible to correctly build in the actual app. He recommended to me that I do the same as him. As someone who both designs and codes, it makes more sense for me to throw in the animations during the building process. It will not only save time and effort, but also ensure that I don’t design a next to impossible animation that isn’t realistic.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Overall, design is a very complex and time-consuming process. It often seems unnecessary to go through all the steps I’ve listed above, but it’s incredibly important if you wish to design an engaging user experience. If you’re still not a believe that design is the centerpiece of anything and everything, I encourage you to watch Tony Fadell — designer of the first iPod and CEO/designer of Nest — during his Ted Talk on the &lt;a href=&quot;https://www.ted.com/talks/tony_fadell_the_first_secret_of_design_is_noticing&quot; target=&quot;_blank&quot;&gt;Secret of Design&lt;/a&gt;. Hope you enjoyed this post!&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Jul 2016 08:34:12 -0700</pubDate>
        <link>http://khou22.github.io/design/2016/07/01/digital-design-the-process-from-concept-to-ios-app.html</link>
        <guid isPermaLink="true">http://khou22.github.io/design/2016/07/01/digital-design-the-process-from-concept-to-ios-app.html</guid>
        
        <category>apps</category>
        
        <category>ios</category>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>WWDC 2016: Advances in UIKit Animations and Transitions</title>
        <description>&lt;p&gt;Video (must be played in Safari): &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/216/&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/videos/play/wwdc2016/216/&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New animations with UIKit in iOS 10&lt;/li&gt;
  &lt;li&gt;Create natural, smooth feeling, responsive animations&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Interpolation and Pacing&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Dotted = actual position&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Solid = final/goal position&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Timing function:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Linear&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ease in&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ease out&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Ease in and out&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Springs:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Overshoot the value and come back to the goal position&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;It affects the pacing of the animation&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;iOS 8 (WWDC 2014) introduced interruptible animations&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;If you interrupt an animation, the object no longer jumps or switches velocities so abruptly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;UIVIewPropertyAnimator new features in iOS 10&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Interruptible animations&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Scrubbable animations&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Reversible animations&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Broad availability of timing functions (not just the usual four)&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Rolling animations can be modified&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Animations as Objects&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Can get the state and position of an animation at any point&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;state: .inactive, .active, .stopped&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;isRunning: true, false&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;isReversed: true, false&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Animations are now objects, not just API calls&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;That way you can store, modify, and get values from it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can also stop an animation: animator.stopAnimation (false)&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Pass false in so that the object can stay right where it is in its path&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Can do something with it later&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;If you pass in true, it still stays in its place, but the animation is over for all intensive purposes&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;To scrub an animation:&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;animator.fractionComplete = fraction&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Like the Interpolation library&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;The fractionComplete doesn’t involve time&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;
            &lt;p&gt;So the timing function doesn’t affect it&lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p&gt;The fractionComplete relates to the position&lt;/p&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reversing animations brings an object back to its start position&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Animation will be as if it never started → .start&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can also add an animation that brings it back to its start position&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;But the animation will be complete → .end&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;iOS 10 can set custom your own timing functions&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;UICubicTimingParameters(animationCurve: .linear) // For linear&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;UICubicTimingParameters(controlPoint1: CGPoint(x: 0.0, y: 1.0), controlPoint2: CGPoint(x: 1.0, y: 0.0)) // For custom timing curve&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Also changed UISpringTimingParameters&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;UISPringTimingParameters(mass: CGFloat, stiffness: CGFloat, damping: CGFloat, initialVelocity velocity: CGVector)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keyframe animations&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;Basically regular animations, but with multiple points&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Example: Can add multiple x/y positions to an animation to create a complex path instead of just from point A to point B&lt;/p&gt;

        &lt;ul&gt;
          &lt;li&gt;Can do point A → B → C → … → Z&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;External References&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/swift-and-ios-writing/a-quick-look-at-uiviewpropertyanimator-a107fb9da5b5#.2y9t95ixn&quot; target=&quot;_blank&quot;&gt;https://medium.com/swift-and-ios-writing/a-quick-look-at-uiviewpropertyanimator-a107fb9da5b5#.2y9t95ixn&lt;/a&gt;
&lt;a href=&quot;https://developer.apple.com/reference/uikit/uiviewpropertyanimator&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/reference/uikit/uiviewpropertyanimator&lt;/a&gt;
&lt;a href=&quot;https://developer.apple.com/reference/uikit/uiviewanimating&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/reference/uikit/uiviewanimating&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jun 2016 09:50:49 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/06/29/wwdc-2016-advances-in-uikit-animations-and-transitions.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/06/29/wwdc-2016-advances-in-uikit-animations-and-transitions.html</guid>
        
        <category>ios</category>
        
        <category>swift</category>
        
        <category>apps</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Making a Simple Page Based Application in Swift</title>
        <description>&lt;h3 class=&quot;post-subheader&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;I’ve been starting to hunker down and learn the basics of Swift. Because my current project at work is to build an onboarding screen, there will likely be some sort of side scrolling element to it — similar to an iPhone homescreen. Because I knew no Swift-specific data structures, principles, etc. going into this, I was learning from the ground up. It was initially really challenging because I had no basic knowledge to go off of. The intent of this side project was to learn the fundamentals of Swift, especially how Views work.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Like all programmers, I googled my way through this project. This &lt;a href=&quot;http://www.thorntech.com/2015/08/need-to-create-an-onboarding-flow-for-your-mobile-app-heres-how-to-do-it-using-uipageviewcontroller-in-swift/&quot; target=&quot;_blank&quot;&gt;tutorial&lt;/a&gt; turned out to be a gold mine, but there were plenty of visits to StackOverflow and Apple’s developer documentation.&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Tutorial&lt;/h3&gt;

&lt;ol&gt;
&lt;li class=&quot;blog-tutorial-step&quot;&gt;I started by creating a single view application. Instead of selecting the “Page-Based Application” template, I decided it would be best to start from scratch so that I could really understand the meat of what was going on. I created a simple landing page with a button that would connect to the “Pager” — the page view controller that houses all of the screens that would populate the side-scrolling view.&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
Next, create the “Pager” by dragging a “Page View Controller” next to the main “View Controller”. You also should create a file named “Pager.swift”, import the UIKit module, and create a UIPageViewController class like so:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;Import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIKit&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Pager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIPageViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
Go to your Main.storyboard, select the Page View Controller, and using the options on the right side, set the class to “Pager.” This connects the storyboard pager view controller element to your Pager.swift code. Also ensure that the “Transition Style” is set to “Scroll.”&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
To reach the “Pager” in the user flow, right click (or control click) the button on the “View Controller” and drag it over the the “Pager.” This will generate a list of potential segue options. Segues are essentially roads between views. In this case, I went with a Show Detail (e.g. Replace) segue. If you build and run this application and press the button, you will be greeted by a blank screen. Don’t worry, we’ll now populate the pager screen.&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
Create two more swift files named “PageOne.swift” and “PageTwo.swift”. Create a view controller in each:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UIKit&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;PageOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// For the second page name it ‘PageTwo’&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewDidLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;First page did load&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
Create two view controllers in your Main.storyboard. They do not need to have a segue from any other page. Just change the class to PageOne or PageTwo so that they connect to your swift files. You should also change the Storyboard ID to match the class name for each View Controller.&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
Now, we will be working in the Pager.swift file to build the actual page-based functionality. In order to access the PageOne and PageTwo views, we create two shortcut functions that significantly condense our code in the future. Create these functions inside of your Pager class:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPageOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageOne&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Retrieve the view&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiateViewControllerWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PageOne&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageOne&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPageTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageTwo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Retrieve page two&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;storyboard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instantiateViewControllerWithIdentifier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;PageTwo&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PageTwo&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
We want to set our default page to page one. In our viewDidLoad() function for the class Pager, set the first page to page one.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Loads the first page immediately after the pager loads&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;setViewControllers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getPageOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()],&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;animated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;completion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
To populate our pager, we must create an extension of the Pager with type: UIPageViewControllerDataSource. A Page View Controller relies on the dataSource to allow users to not only swipe between/access pages, but also to create the famous page control dots that iPhone users have grown accustomed to. Your Pager extension should look like this:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Pager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIPageViewControllerDataSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
To allow users to swipe, you must set up the prebuilt functions viewControllerAfterViewController and viewControllerBeforeViewController. It essentially recognizes which way you are scrolling to, and sets the new page. Add these two functions to your Pager extension:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;pageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIPageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewControllerAfterViewController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swiping forward&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isKindOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PageOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If you&amp;#39;re on page one&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// We want to swipe to page two&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPageTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If on page two&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// End of all pages&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;pageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIPageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewControllerBeforeViewController&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIViewController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swiping backward&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isKindOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PageTwo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If on page two, can swipe back to page one&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getPageOne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// If on the first page, can&amp;#39;t swipe back&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
Right below those functions, we want to create the page control dots:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presentationCountForPageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;pageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIPageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The number of dots in the page control dots&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;presentationIndexForPageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;pageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;UIPageViewController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// On the first dot when you first load the OnboardingPager&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Swift automatically handles switching pages and updating the page control dots&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Updates when setViewControllers is called&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
Lastly, we want to connect the dataSource to the extension by calling:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Set dataSource: incorporates the pages&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dataSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Refers to the Pager extension of type UIPageViewControllerDataSource&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;

&lt;li class=&quot;blog-tutorial-step&quot;&gt;
I also recommend setting a background color to the Pager so that the page control dots can be visible. Do this inside of your class Pager: UIPageViewController’s function viewDidLoad().

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;backgroundColor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lightGrayColor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Set background color to white&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Source Files&lt;/h3&gt;
&lt;p&gt;Here are some of the key, completed source files (note: I named the Pager “OnboardingPager” instead of “Pager” as I stated in the tutorial):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;./../../../../media/blog/source-files/making-a-simple-page-based-application-swift/ViewController.swift&quot; download=&quot;&quot;&gt;ViewController.swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./../../../../media/blog/source-files/making-a-simple-page-based-application-swift/OnboardingView.swift&quot; download=&quot;&quot;&gt;OnboardingView.swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./../../../../media/blog/source-files/making-a-simple-page-based-application-swift/PageOne.swift&quot; download=&quot;&quot;&gt;PageOne.swift&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;./../../../../media/blog/source-files/making-a-simple-page-based-application-swift/PageTwo.swift&quot; download=&quot;&quot;&gt;PageTwo.swift&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 28 Jun 2016 08:10:08 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/06/28/making-a-simple-page-based-application-in-swift.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/06/28/making-a-simple-page-based-application-in-swift.html</guid>
        
        <category>ios</category>
        
        <category>swift</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>WWDC 2016: Internationalization Best Practices</title>
        <description>&lt;p&gt;Video (must be played in Safari): &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/201/&quot; target=&quot;_blank&quot;&gt;https://developer.apple.com/videos/play/wwdc2016/201/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Formatters for Dates/Times&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t use a set date format&lt;/li&gt;
  &lt;li&gt;Chinese and English are opposite for example&lt;/li&gt;
  &lt;li&gt;Can’t have a fixed format&lt;/li&gt;
  &lt;li&gt;Use the predefined .shortStyle/.mediumStyle/etc.&lt;/li&gt;
  &lt;li&gt;Works for both dates and times&lt;/li&gt;
  &lt;li&gt;Automatically formats it for each language&lt;/li&gt;
  &lt;li&gt;Can use a template for custom things&lt;/li&gt;
  &lt;li&gt;But use .setLocalizedDateFormatFromTemplate(“mYd”)&lt;/li&gt;
  &lt;li&gt;Will try and make it correct when it’s a different language&lt;/li&gt;
  &lt;li&gt;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDateFormatter_Class/&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Formatters for Names:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Show names the correct way with PersonNameComponents()&lt;/li&gt;
  &lt;li&gt;Ask for the .long/.medium/.short/.abbreviated format&lt;/li&gt;
  &lt;li&gt;Will support different langauges&lt;/li&gt;
  &lt;li&gt;Name parsing → full name to a set of components&lt;/li&gt;
  &lt;li&gt;Uses a statistical model&lt;/li&gt;
  &lt;li&gt;Not parsing based on a formula&lt;/li&gt;
  &lt;li&gt;Supports multiple languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Other:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;In labels, don’t clip lines — must have the entire character showing&lt;/li&gt;
  &lt;li&gt;Multi-line labels, consider changing the line spacing&lt;/li&gt;
  &lt;li&gt;UIFont.preferredFont(forTextStyle: UIFontTextStyleBody)&lt;/li&gt;
  &lt;li&gt;Automatically adjusts line height for different languages&lt;/li&gt;
  &lt;li&gt;Icons are really important&lt;/li&gt;
  &lt;li&gt;Avoid using words/numbers in icons&lt;/li&gt;
  &lt;li&gt;“Photos” is a good example of an icon that doesn&#39;t tie it to a specific language&lt;/li&gt;
  &lt;li&gt;Not left to right or right to left&lt;/li&gt;
  &lt;li&gt;Good for all languages&lt;/li&gt;
  &lt;li&gt;Create dedicated artwork for right to left languages&lt;/li&gt;
  &lt;li&gt;But if you just want to flip the image, you can use the existing API&lt;/li&gt;
  &lt;li&gt;App Store Names&lt;/li&gt;
  &lt;li&gt;Users are most likely to download apps in their language&lt;/li&gt;
  &lt;li&gt;Don’t always assume users will type in English&lt;/li&gt;
  &lt;li&gt;They might run OS in English, use keyboard from another language&lt;/li&gt;
  &lt;li&gt;Must test this before deploying&lt;/li&gt;
  &lt;li&gt;Localized Screenshots&lt;/li&gt;
  &lt;li&gt;Localized content/keyboard&lt;/li&gt;
  &lt;li&gt;Want to see the experience they will have in their language&lt;/li&gt;
  &lt;li&gt;Custom features — examples:&lt;/li&gt;
  &lt;li&gt;Support for lunar calendar&lt;/li&gt;
  &lt;li&gt;Templates for non-English/non-Western cultures&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Types of Formatters:&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;ByteCountFormatter&lt;/li&gt;
  &lt;li&gt;DateFormatter&lt;/li&gt;
  &lt;li&gt;DateComponentsFormatter&lt;/li&gt;
  &lt;li&gt;DateIntervalFormatter&lt;/li&gt;
  &lt;li&gt;NumberFormatter&lt;/li&gt;
  &lt;li&gt;PersonNameComponentsFormatter&lt;/li&gt;
  &lt;li&gt;MeasurementFormatter&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 22 Jun 2016 11:15:41 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/06/22/wwdc-2016-internationalization-best-practices.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/06/22/wwdc-2016-internationalization-best-practices.html</guid>
        
        <category>swift</category>
        
        <category>ios</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Internationalizing Your iOS App in Xcode 7</title>
        <description>&lt;h1 id=&quot;localization-in-swift-xcode-731&quot;&gt;Localization in Swift XCode 7.3.1&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;** This is a blog post in progress **&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;Prepare XCode Project&lt;/h1&gt;
&lt;p&gt;Go to the project page → Localizations → Add a new language and select all the resources
Sometimes the storyboards aren’t all localized. If that’s the case, you must manually localize storyboards. To do this, on the info panel on the right, can press localize and add the languages you want.&lt;/p&gt;

&lt;h1 id=&quot;prepping-code&quot;&gt;Prepping Code&lt;/h1&gt;
&lt;p&gt;This is for hard coded strings in the code
You can wrap them in: NSLocalizedString(String, comment: String)
For instances where you have hard coded strings &lt;i&gt;and&lt;/i&gt; variables within the hard coded strings, you must use the String format setup. For example:
&lt;br /&gt;// Old setup:
&lt;br /&gt;let localizedString = NSLocalizedString(“Test Results - (interval)”, comment: “Test results”)
&lt;br /&gt;// New setup:
&lt;br /&gt;let localizedString = String.localizedStringWithFormat(NSLocalizedString(“Test Results - %@”, comment: “Test results date string”), interval)
&lt;br /&gt;The “%@” represents a placeholder in the String that will not be translated into another language, and can therefore be used as a bookmark to inject a variable into a localized string.&lt;/p&gt;

&lt;h1 id=&quot;adding-in-translations&quot;&gt;Adding in translations&lt;/h1&gt;
&lt;p&gt;To Export:
Delete Localizable.strings in parent so that there’s no duplicate
Change the .xliff file (found it useful to use a simple IDE like Atom or Sublime to quickly change text. I added in ‘French: ‘ at the beginning of every translation so that I would know when the app recognizes a NSLocalizedString type)&lt;/p&gt;

&lt;h1 id=&quot;to-import&quot;&gt;To Import:&lt;/h1&gt;
&lt;p&gt;Import the .xliff file
Add the newly created Localizable.strings file (in the parent) to the build phases (Target –&amp;gt; Build Phases –&amp;gt; Copy Bundle Resources –&amp;gt; Add) — http://fullscreensoftware.blogspot.co.il/2011/09/xcode-4-and-localizablestrings-issue.html
Build and run&lt;/p&gt;

&lt;h1 id=&quot;to-add-other-languages&quot;&gt;To add other languages:&lt;/h1&gt;
&lt;p&gt;Localize the “Localizable.strings” file and replace the content with the translations for that specific language&lt;/p&gt;

&lt;h1 id=&quot;for-line-breaks-&quot;&gt;&lt;em&gt;** For Line Breaks **&lt;/em&gt;&lt;/h1&gt;
&lt;p&gt;Typically denoted by a “\n” in the code
It doesn’t format correctly in the .xliff file
When you import it back into the project, it won’t recognize your translation. Instead, modify the Localizable.strings file directly. Syntax as such:
“{Original…}\n{Original…}”=“French: {Original…}\n{Original…}”
You must add in the “\n”s because Swift exports the “\n”s as actual line breaks, but doesn’t convert the line breaks back into “\n”s on import&lt;/p&gt;

&lt;p&gt;Solution:
Change ‘\n’ to another placeholder like ‘[[n’
Before it is injected into the frontend, replace all instances of ‘[[n’ to ‘\n’&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jun 2016 11:16:44 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/06/20/internationalizing-your-ios-app-in-xcode-7.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/06/20/internationalizing-your-ios-app-in-xcode-7.html</guid>
        
        <category>ios</category>
        
        <category>swift</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Making a Wood Turned Segmented Bowl with Inlaid Letters</title>
        <description>&lt;p&gt;** Blog post is currently unfinished **
I recently finished what is probably my last major wood turning project in high school. As this is my last semester at Lick-Wilmerding, I anticipated the need to end my high school career in the shops on a strong note. For that reason, I decided on an ambitious project: building a segmented bowl with my nickname, “KHou,” inlaid on the side of it in a different type of wood.
&lt;br class=&quot;post-line-break&quot; /&gt;
I had come across a video on YouTube of someone who used the scroll saw to inlay letters of a different type of wood.&lt;/p&gt;
</description>
        <pubDate>Fri, 20 May 2016 11:48:45 -0700</pubDate>
        <link>http://khou22.github.io/wood/2016/05/20/making-a-wood-turned-segmented-bowl-with-inlaid-letters.html</link>
        <guid isPermaLink="true">http://khou22.github.io/wood/2016/05/20/making-a-wood-turned-segmented-bowl-with-inlaid-letters.html</guid>
        
        
        <category>wood</category>
        
      </item>
    
      <item>
        <title>Designing My YouTube Channel Artwork</title>
        <description>&lt;p&gt;I finally got around to designing my own YouTube channel artwork. Similar to a Facebook cover photo, YouTube’s channel artwork is the second most important image to your YouTube brand. I had just released my first “high quality” &lt;a href=&quot;https://www.youtube.com/watch?v=_ZSztfYnnC8&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt; and I wanted to improve the rest of my YouTube channel as well. Click &lt;a href=&quot;https://youtube.com/kevinhou22&quot;&gt;here&lt;/a&gt; to visit my YouTube channel.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Design Process&lt;/h3&gt;
&lt;p&gt;I found a &lt;a href=&quot;http://2.bp.blogspot.com/-tjmufytBinc/UcvXPhPX8DI/AAAAAAAACYE/J8yVDWg25-I/s1600/YouTube-One-Channel-Template-Full-Optimized-(1).png&quot; target=&quot;_blank&quot;&gt;template&lt;/a&gt; online that detailed the dimensions for each YouTube platform. For every YouTube client (ie. mobile, TV, computer, etc.), there is a specific cropping method. I used the dimensions to create a design that would look good on all possible devices.
&lt;br class=&quot;post-line-break&quot; /&gt;
I wanted to go for a minimalistic look — flat and simple seems to be the trend these days among digital design. At first, I wanted to incorporate some aspect of woodshop in my channel artwork. I tried many different methods, both subtle and blaring, to weave in my passion for woodshop. After trying and failing to add things like a wood background to my design, I decided to leave it out entirely. It would be evident for anyone looking at my channel to know that I loved woodshop. I didn’t feel like I could produce a design that I was proud of if I tried to incorporate woodworking — it would be clear I was forcing it.
&lt;br class=&quot;post-line-break&quot; /&gt;
I looked at the channel artworks of some of my favorite tech and wood YouTubers. I found that YouTubers that loved wood used more image based, “stack”-style cover photos; however, my tech YouTubers favored the a cleaner look. Being a web developer and digital designer, I was in favor of the latter.&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Finished Product&lt;/h3&gt;
&lt;h4&gt;Desktop Browser&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;./../../../../media/blog/images/YouTube Channel Artwork/Desktop Size.png&quot; /&gt;
This is typically what a YouTuber user would see. This is the crop size for a desktop browser. A mobile device would be the same height as this, but the side edges would be trimmed inward a tiny bit.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Full Size (For TV Clients)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;./../../../../media/blog/images/YouTube Channel Artwork/YouTube Channel Artwork.jpg&quot; /&gt;
This is the full resolution image. The only time a user would see this entire image would be on the TV.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 May 2016 14:32:05 -0700</pubDate>
        <link>http://khou22.github.io/design/2016/05/07/designing-my-youtube-channel-artwork.html</link>
        <guid isPermaLink="true">http://khou22.github.io/design/2016/05/07/designing-my-youtube-channel-artwork.html</guid>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>GitHub Octocat Design Challenge Winner</title>
        <description>&lt;p&gt;I designed a logo for a project of mine that took a unique spin on the GitHub Octocat mascot. I entered it into a hackathon challenge and it was picked as the best overall design. GitHub Education has hosted this design competition many times for various hackathons. At the MenloHacks hackathon a couple weekends ago, my group and I built &lt;a href=&quot;/blog/projects/Execute-Order-66/&quot; target=&quot;_blank&quot;&gt;Execute Order 66&lt;/a&gt;, a Chrome extension that automatically censors vulgar language in GitHub repos.&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Design Process&lt;/h3&gt;
&lt;p&gt;I took inspiration from the name of our Chrome Extension: Execute Order 66. For those out there who are not Star Wars fans, Execute Order 66 was the directive that commanded the assassination of all the Jedi. Similarly, our extension orders the destruction of all curse words in your repositories.
&lt;br class=&quot;post-line-break&quot; /&gt;
It was easy decision to include the Octocat mascot in my design since we were creating a GitHub developer tool. Because of the dark nature of the phrase “Execute Order 66,” I felt that the overall design should reflect this. As a result, I designed with largely a black color palette and a Sith lightsaber to add a red highlight. For the background, I used the iconic “light speed” design from Star Wars.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/executeOrder66/GitHub Logo.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
Overall, I was pretty happy with my design. For one, because this was our second project, I had to design this logo in about 10 minutes. Secondly, I got a lot of exposure for it on Twitter! It was nice to know that people out there appreciated my design. It strengthened my confidence in my design skills and I’m beginning to now identify as a designer as well as a programmer. If I were to do this logo again, I would increase the resolution of my design. It’s a little low resolution, but it’s not noticeable on the &lt;a href=&quot;https://chrome.google.com/webstore/detail/execute-order-66/hgoanjhaboccoaefceiebdodiillhone&quot;&gt;Chrome app store&lt;/a&gt;. Feel free to download the &lt;a href=&quot;https://chrome.google.com/webstore/detail/execute-order-66/hgoanjhaboccoaefceiebdodiillhone&quot;&gt;Chrome Extension&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Competition Results&lt;/h3&gt;
&lt;p&gt;Below are screenshots and links of the various Twitter announcements. About 15 people “liked” my design and I even got a couple retweets!
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;strong&gt;&lt;em&gt;Screenshots not yet added, but links are correct&lt;/em&gt;&lt;/strong&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;a href=&quot;https://twitter.com/GitHubEducation/status/722884798457335810&quot; target=&quot;_blank&quot;&gt;GitHub Education Announcement&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;./../../../../media/projects/executeOrder66/Twitter Post - GitHub Education.jpg&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/MLHacks/status/723598523627794432&quot; target=&quot;_blank&quot;&gt;Major League Hacking Shoutout&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;./../../../../media/projects/executeOrder66/Twitter Post - Major League Hacking.jpg&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/kevinhou22/status/721793013060505601&quot; target=&quot;_blank&quot;&gt;My Original Tweet&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;./../../../../media/projects/executeOrder66/Twitter Post - Kevin Hou.jpg&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 07:49:19 -0700</pubDate>
        <link>http://khou22.github.io/design/2016/05/01/github-octocat-design-challenge-winner.html</link>
        <guid isPermaLink="true">http://khou22.github.io/design/2016/05/01/github-octocat-design-challenge-winner.html</guid>
        
        <category>apps</category>
        
        <category>ios</category>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>Uber Scheduler: Calling Ubers Alarm Clock Style</title>
        <description>&lt;p&gt;This past week, a group of friends and I attended a hackathon, MenloHacks ñ an MLH (Major League Hackathon) sponsored event. This was my first hackathon and was also for one of my two partners. Our group of 3 high schoolers built an Uber scheduling app for both iOS and Android. Our app would essentially allow users to schedule uber rides ahead of time at a set date/time. Another core segment of our app was the recurring schedule component: an alarm-clock-style feature that could automatically call you an Uber on specific weekdays (i.e. every Monday, Wednesday, and Friday at 5:45 PM). We were able to complete our product within the allotted 24 hour time period. We even had time to build another project - a Google Chrome extension that censors your vulgar GitHub commits (see &lt;a href=&quot;#&quot;&gt;Execute Order 66&lt;/a&gt;). I worked as the primary front end engineer and also designed the UI/UX from scratch.
&lt;br class=&quot;post-line-break&quot; /&gt;
We built our app in Ionic using AngularJS for the front end and Python for our Google Cloud Engine backend. We wanted to have discipline when building the app so we concentrated on maintaining good coding practices such as commenting code, building in a scalable fashion, as well as programming code that was organized and efficient. Due to the nature of Google Cloud Engine, our app is potentially scalable to millions of users.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Design&lt;/h3&gt;
&lt;h5&gt;Scroll down for images of my designs&lt;/h5&gt;
&lt;p&gt;This was one of my first times designing an app from ground zero. Often times I would design pages as I went or only design a single component. Because I realized the importance of the role of UX/UI design in app development, I decided to take the time to plan each page out down to the pixel. While the rest of my group coded the backend on Google Cloud Engine, I spent about 5 hours working with Sketch to come up with a simple and streamlined user flow as well as a beautiful UI. I even mocked up different variations and iterated upon my designs.
&lt;br class=&quot;post-line-break&quot; /&gt;
I used Google Material Design as inspiration and a starting block because we enjoyed its styling methodology. While many of our components were variations of existing components (a small percentage were directly copied), some of the icons and components were of my own creation that I designed to mimic the overall Material Design feel.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Building the App&lt;/h3&gt;
&lt;p&gt;After spending about a quarter of the 24 hours designing, I began to transition to building the front end. One of my group members had already built a somewhat functional landing page, so I set about building the other pages. I found it significantly easier to build the front end when I had an accurate design to go off of. In fact, the time I saved likely outweighed the 6 or so hours it took to create the designs.
&lt;br class=&quot;post-line-break&quot; /&gt;
I created Angular services for everything relating to global variables or functions. By doing this from the beginning, it made my group member’s job of connecting the front end to the backend significantly easier. I used some open source Angular packages that sped up the coding process. the two packages I used were for the date selection modal and for the time selection modal. They can be found here:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Time Picker Modal: &lt;a href=&quot;https://github.com/rajeshwarpatlolla/ionic-timepicker&quot; target=&quot;_blank&quot;&gt;https://github.com/rajeshwarpatlolla/ionic-timepicker
  &lt;li&gt;Date Picker Modal: &lt;a href=&quot;https://github.com/rajeshwarpatlolla/ionic-datepicker&quot; target=&quot;_blank&quot;&gt;https://github.com/rajeshwarpatlolla/ionic-datepicker&lt;/a&gt;&lt;/li&gt;

&lt;br class=&quot;post-line-break&quot; /&gt;
Overall, the development process went very smoothly and our group worked together well. Because this was my first hackathon, I was both happy and pleasantly surprised when we were chosen as the best overall hack that day.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;What&#39;s Next?&lt;/h3&gt;
We&#39;re all pretty excited about the app and we feel it has a lot of potential. We are currently polishing up the front end and working on authorizing our app with Uber. The app has many bugs (as expected) that we&#39;re hoping to clear up so that we can begin user testing at our high school. We hope to release it on the app store soon. In the long term, we think our app could integrate with other ride-sharing services, such as Lyft, and automatically request from the service with the cheapest rate, fastest pickup time, etc. Stay tuned!
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;External Links:&lt;/h3&gt;
Go to our &lt;a href=&quot;http://devpost.com/software/uber-scheduler&quot;&gt;Devpost project page&lt;/a&gt; to see what we submitted for the Hackathon. It contains screenshots, a narrative of our build, and more.
&lt;br class=&quot;post-line-break&quot; /&gt;
For our complete source code see our &lt;a href=&quot;https://github.com/AlexFine/MenloHacks&quot;&gt;GitHub Repo&lt;/a&gt;.

&lt;h3 class=&quot;post-subheader&quot;&gt;Design Mockups (Created with Sketch)&lt;/h3&gt;
I created multiple designs and iterated on previous versions. Due to the 24 hour time restriction, I only created two major versions. Below are some designs that show the evolution of the app design. I used Sketch to create the designs.
&lt;h4&gt;Version 1&lt;/h4&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Home Screen UI.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - Time Picker V1.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - General Tab V1.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;

&lt;h4&gt;Version 2 (Final Designs)&lt;/h4&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/Home Screen.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - Location Tab.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - Time Picker V2.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - General Tab V2.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;App Screenshots (Working MVP)&lt;/h3&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/Home Screen.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/General Settings.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/Schedule Configuration.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/Fare Estimate.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Thu, 21 Apr 2016 15:43:30 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/04/21/uber-scheduler-calling-ubers-alarm-clock-style.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/04/21/uber-scheduler-calling-ubers-alarm-clock-style.html</guid>
        
        <category>ionic</category>
        
        <category>javascript</category>
        
        <category>html</category>
        
        <category>css</category>
        
        <category>python</category>
        
        <category>apps</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
