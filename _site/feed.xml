<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Hou&#39;s Blog</title>
    <description>A blog about programming, wood, and anything that comes to my mind. Enjoy.
</description>
    <link>http://khou22.github.io/</link>
    <atom:link href="http://khou22.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 19 May 2016 01:24:56 -0700</pubDate>
    <lastBuildDate>Thu, 19 May 2016 01:24:56 -0700</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Designing My YouTube Channel Artwork</title>
        <description>&lt;p&gt;I finally got around to designing my own YouTube channel artwork. Similar to a Facebook cover photo, YouTube’s channel artwork is the second most important image to your YouTube brand. I had just released my first “high quality” &lt;a href=&quot;https://www.youtube.com/watch?v=_ZSztfYnnC8&quot; target=&quot;_blank&quot;&gt;video&lt;/a&gt; and I wanted to improve the rest of my YouTube channel as well. Click &lt;a href=&quot;https://youtube.com/kevinhou22&quot;&gt;here&lt;/a&gt; to visit my YouTube channel.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Design Process&lt;/h3&gt;
&lt;p&gt;I found a &lt;a href=&quot;http://2.bp.blogspot.com/-tjmufytBinc/UcvXPhPX8DI/AAAAAAAACYE/J8yVDWg25-I/s1600/YouTube-One-Channel-Template-Full-Optimized-(1).png&quot; target=&quot;_blank&quot;&gt;template&lt;/a&gt; online that detailed the dimensions for each YouTube platform. For every YouTube client (ie. mobile, TV, computer, etc.), there is a specific cropping method. I used the dimensions to create a design that would look good on all possible devices.
&lt;br class=&quot;post-line-break&quot; /&gt;
I wanted to go for a minimalistic look — flat and simple seems to be the trend these days among digital design. At first, I wanted to incorporate some aspect of woodshop in my channel artwork. I tried many different methods, both subtle and blaring, to weave in my passion for woodshop. After trying and failing to add things like a wood background to my design, I decided to leave it out entirely. It would be evident for anyone looking at my channel to know that I loved woodshop. I didn’t feel like I could produce a design that I was proud of if I tried to incorporate woodworking — it would be clear I was forcing it.
&lt;br class=&quot;post-line-break&quot; /&gt;
I looked at the channel artworks of some of my favorite tech and wood YouTubers. I found that YouTubers that loved wood used more image based, “stack”-style cover photos; however, my tech YouTubers favored the a cleaner look. Being a web developer and digital designer, I was in favor of the latter.&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Finished Product&lt;/h3&gt;
&lt;h4&gt;Desktop Browser&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;./../../../../media/blog/images/YouTube Channel Artwork/Desktop Size.png&quot; /&gt;
This is typically what a YouTuber user would see. This is the crop size for a desktop browser. A mobile device would be the same height as this, but the side edges would be trimmed inward a tiny bit.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h4&gt;Full Size (For TV Clients)&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;./../../../../media/blog/images/YouTube Channel Artwork/YouTube Channel Artwork.jpg&quot; /&gt;
This is the full resolution image. The only time a user would see this entire image would be on the TV.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 May 2016 14:32:05 -0700</pubDate>
        <link>http://khou22.github.io/design/2016/05/07/designing-my-youtube-channel-artwork.html</link>
        <guid isPermaLink="true">http://khou22.github.io/design/2016/05/07/designing-my-youtube-channel-artwork.html</guid>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>GitHub Octocat Design Challenge Winner</title>
        <description>&lt;p&gt;I designed a logo for a project of mine that took a unique spin on the GitHub Octocat mascot. I entered it into a hackathon challenge and it was picked as the best overall design. GitHub Education has hosted this design competition many times for various hackathons. At the MenloHacks hackathon a couple weekends ago, my group and I built &lt;a href=&quot;/blog/projects/Execute-Order-66/&quot; target=&quot;_blank&quot;&gt;Execute Order 66&lt;/a&gt;, a Chrome extension that automatically censors vulgar language in GitHub repos.&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Design Process&lt;/h3&gt;
&lt;p&gt;I took inspiration from the name of our Chrome Extension: Execute Order 66. For those out there who are not Star Wars fans, Execute Order 66 was the directive that commanded the assassination of all the Jedi. Similarly, our extension orders the destruction of all curse words in your repositories.
&lt;br class=&quot;post-line-break&quot; /&gt;
It was easy decision to include the Octocat mascot in my design since we were creating a GitHub developer tool. Because of the dark nature of the phrase “Execute Order 66,” I felt that the overall design should reflect this. As a result, I designed with largely a black color palette and a Sith lightsaber to add a red highlight. For the background, I used the iconic “light speed” design from Star Wars.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/executeOrder66/GitHub Logo.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
Overall, I was pretty happy with my design. For one, because this was our second project, I had to design this logo in about 10 minutes. Secondly, I got a lot of exposure for it on Twitter! It was nice to know that people out there appreciated my design. It strengthened my confidence in my design skills and I’m beginning to now identify as a designer as well as a programmer. If I were to do this logo again, I would increase the resolution of my design. It’s a little low resolution, but it’s not noticeable on the &lt;a href=&quot;https://chrome.google.com/webstore/detail/execute-order-66/hgoanjhaboccoaefceiebdodiillhone&quot;&gt;Chrome app store&lt;/a&gt;. Feel free to download the &lt;a href=&quot;https://chrome.google.com/webstore/detail/execute-order-66/hgoanjhaboccoaefceiebdodiillhone&quot;&gt;Chrome Extension&lt;/a&gt;.&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Competition Results&lt;/h3&gt;
&lt;p&gt;Below are screenshots and links of the various Twitter announcements. About 15 people “liked” my design and I even got a couple retweets!
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;strong&gt;&lt;em&gt;Screenshots not yet added, but links are correct&lt;/em&gt;&lt;/strong&gt;
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;a href=&quot;https://twitter.com/GitHubEducation/status/722884798457335810&quot; target=&quot;_blank&quot;&gt;GitHub Education Announcement&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;./../../../../media/projects/executeOrder66/Twitter Post - GitHub Education.jpg&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/MLHacks/status/723598523627794432&quot; target=&quot;_blank&quot;&gt;Major League Hacking Shoutout&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;./../../../../media/projects/executeOrder66/Twitter Post - Major League Hacking.jpg&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/kevinhou22/status/721793013060505601&quot; target=&quot;_blank&quot;&gt;My Original Tweet&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;./../../../../media/projects/executeOrder66/Twitter Post - Kevin Hou.jpg&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 07:49:19 -0700</pubDate>
        <link>http://khou22.github.io/design/2016/05/01/github-octocat-design-challenge-winner.html</link>
        <guid isPermaLink="true">http://khou22.github.io/design/2016/05/01/github-octocat-design-challenge-winner.html</guid>
        
        <category>apps</category>
        
        
        <category>design</category>
        
      </item>
    
      <item>
        <title>Uber Scheduler: Calling Ubers Alarm Clock Style</title>
        <description>&lt;p&gt;This past week, a group of friends and I attended a hackathon, MenloHacks ñ an MLH (Major League Hackathon) sponsored event. This was my first hackathon and was also for one of my two partners. Our group of 3 high schoolers built an Uber scheduling app for both iOS and Android. Our app would essentially allow users to schedule uber rides ahead of time at a set date/time. Another core segment of our app was the recurring schedule component: an alarm-clock-style feature that could automatically call you an Uber on specific weekdays (i.e. every Monday, Wednesday, and Friday at 5:45 PM). We were able to complete our product within the allotted 24 hour time period. We even had time to build another project - a Google Chrome extension that censors your vulgar GitHub commits (see &lt;a href=&quot;#&quot;&gt;Execute Order 66&lt;/a&gt;). I worked as the primary front end engineer and also designed the UI/UX from scratch.
&lt;br class=&quot;post-line-break&quot; /&gt;
We built our app in Ionic using AngularJS for the front end and Python for our Google Cloud Engine backend. We wanted to have discipline when building the app so we concentrated on maintaining good coding practices such as commenting code, building in a scalable fashion, as well as programming code that was organized and efficient. Due to the nature of Google Cloud Engine, our app is potentially scalable to millions of users.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Design&lt;/h3&gt;
&lt;h5&gt;Scroll down for images of my designs&lt;/h5&gt;
&lt;p&gt;This was one of my first times designing an app from ground zero. Often times I would design pages as I went or only design a single component. Because I realized the importance of the role of UX/UI design in app development, I decided to take the time to plan each page out down to the pixel. While the rest of my group coded the backend on Google Cloud Engine, I spent about 5 hours working with Sketch to come up with a simple and streamlined user flow as well as a beautiful UI. I even mocked up different variations and iterated upon my designs.
&lt;br class=&quot;post-line-break&quot; /&gt;
I used Google Material Design as inspiration and a starting block because we enjoyed its styling methodology. While many of our components were variations of existing components (a small percentage were directly copied), some of the icons and components were of my own creation that I designed to mimic the overall Material Design feel.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Building the App&lt;/h3&gt;
&lt;p&gt;After spending about a quarter of the 24 hours designing, I began to transition to building the front end. One of my group members had already built a somewhat functional landing page, so I set about building the other pages. I found it significantly easier to build the front end when I had an accurate design to go off of. In fact, the time I saved likely outweighed the 6 or so hours it took to create the designs.
&lt;br class=&quot;post-line-break&quot; /&gt;
I created Angular services for everything relating to global variables or functions. By doing this from the beginning, it made my group member’s job of connecting the front end to the backend significantly easier. I used some open source Angular packages that sped up the coding process. the two packages I used were for the date selection modal and for the time selection modal. They can be found here:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Time Picker Modal: &lt;a href=&quot;https://github.com/rajeshwarpatlolla/ionic-timepicker&quot; target=&quot;_blank&quot;&gt;https://github.com/rajeshwarpatlolla/ionic-timepicker
  &lt;li&gt;Date Picker Modal: &lt;a href=&quot;https://github.com/rajeshwarpatlolla/ionic-datepicker&quot; target=&quot;_blank&quot;&gt;https://github.com/rajeshwarpatlolla/ionic-datepicker&lt;/a&gt;&lt;/li&gt;

&lt;br class=&quot;post-line-break&quot; /&gt;
Overall, the development process went very smoothly and our group worked together well. Because this was my first hackathon, I was both happy and pleasantly surprised when we were chosen as the best overall hack that day.
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;What&#39;s Next?&lt;/h3&gt;
We&#39;re all pretty excited about the app and we feel it has a lot of potential. We are currently polishing up the front end and working on authorizing our app with Uber. The app has many bugs (as expected) that we&#39;re hoping to clear up so that we can begin user testing at our high school. We hope to release it on the app store soon. In the long term, we think our app could integrate with other ride-sharing services, such as Lyft, and automatically request from the service with the cheapest rate, fastest pickup time, etc. Stay tuned!
&lt;br class=&quot;post-line-break&quot; /&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;External Links:&lt;/h3&gt;
Go to our &lt;a href=&quot;http://devpost.com/software/uber-scheduler&quot;&gt;Devpost project page&lt;/a&gt; to see what we submitted for the Hackathon. It contains screenshots, a narrative of our build, and more.
&lt;br class=&quot;post-line-break&quot; /&gt;
For our complete source code see our &lt;a href=&quot;https://github.com/AlexFine/MenloHacks&quot;&gt;GitHub Repo&lt;/a&gt;.

&lt;h3 class=&quot;post-subheader&quot;&gt;Design Mockups (Created with Sketch)&lt;/h3&gt;
I created multiple designs and iterated on previous versions. Due to the 24 hour time restriction, I only created two major versions. Below are some designs that show the evolution of the app design. I used Sketch to create the designs.
&lt;h4&gt;Version 1&lt;/h4&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Home Screen UI.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - Time Picker V1.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - General Tab V1.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;

&lt;h4&gt;Version 2 (Final Designs)&lt;/h4&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/Home Screen.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - Location Tab.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - Time Picker V2.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Design Mockups/Edit Ride UI - General Tab V2.png&quot; class=&quot;iPhone-screenshots-small&quot; /&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;App Screenshots (Working MVP)&lt;/h3&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/Home Screen.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/General Settings.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/Schedule Configuration.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;img src=&quot;./../../../../media/projects/uberScheduler/Screenshots/Fare Estimate.png&quot; class=&quot;iPhone-screenshots-medium&quot; /&gt;
&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;
</description>
        <pubDate>Thu, 21 Apr 2016 15:43:30 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/04/21/uber-scheduler-calling-ubers-alarm-clock-style.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/04/21/uber-scheduler-calling-ubers-alarm-clock-style.html</guid>
        
        <category>ionic</category>
        
        <category>javascript</category>
        
        <category>html</category>
        
        <category>css</category>
        
        <category>python</category>
        
        <category>apps</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>First Hackathon: 24 Hours Straight of Coding</title>
        <description>&lt;h3 class=&quot;post-subheader&quot;&gt;The Experience&lt;/h3&gt;
&lt;p&gt;On the weekend of April 16 and 17, I attended my first ever hackathon: MenloHacks. Located at the Menlo School in Menlo, California. It was a high school hackathon sponsored by Major League Hacking (MLH) - the official sponsor for high school hackathons. I was a little bit nervous largely because I didn’t know what to expect. Part of my anxiety stemmed from the fact that I had no real baseline as to how good of a coder I really was. I had an incredibly successful summer at Salesforce where I was coding alongside other college students, but I wasn’t sure how I’d fare with the added time pressure, constraints, etc. at a hackathon.
&lt;br class=&quot;post-line-break&quot; /&gt;
I have a group of four friends at school who I work on and Independent Study with. We’ve been working together for the semester (about 4 or 5 months now) and we decided to enter this hackathon together as a group. Unfortunately, one of our group members was unable to attend due to logistical issues, but he was an important part of our group nevertheless. So in the end, it was me (a senior), a freshman, and a junior. With the exception of the junior, the freshman and I had never attended a hackathon before. We both had the same mixed feelings coming in, but I think it’s safe to say that those feelings were alleviated almost immediately.
&lt;br class=&quot;post-line-break&quot; /&gt;
The general atmosphere was great and the excitement was palpable. For many, this was also their first hackathon so I did not feel alone. Furthermore, my group had a great idea and an incredible team of three that we already knew had great chemistry. We each had our own roles and had worked together enough before that we knew our tasks already. I was the frontend developer and the designer.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;The Projects&lt;/h3&gt;
&lt;p&gt;Our project idea coming in was to build an Uber scheduling app - an iOS and Android app that would allow a user to schedule rides ahead of time or on a recurring schedule. If you would like to know more, I encourage you to see my blog post on the &lt;a href=&quot;/programming/2016/04/21/uber-scheduler-calling-ubers-alarm-clock-style.html&quot; target=&quot;_blank&quot;&gt;Uber Scheduler&lt;/a&gt;. We finished this project about 3 hours before the hacking period ended so we decided to build a fun Chrome Extension called &lt;a href=&quot;https://chrome.google.com/webstore/detail/execute-order-66/hgoanjhaboccoaefceiebdodiillhone&quot;&gt;Execute Order 66&lt;/a&gt;. This nifty extension cleans up your GitHub repository, hiding all curse words or vulgar language that would potentially be harmful (ie. recruiters, Hackathon judges, etc.). If you would like to know more, please see the &lt;a href=&quot;/blog/projects/Execute-Order-66/&quot; target=&quot;_blank&quot;&gt;Project Page&lt;/a&gt;.
&lt;br class=&quot;post-line-break&quot; /&gt;
We worked extremely hard on our two projects for the duration of the Hackathon. The official hacking period began at 12 PM on April 17th and it ended at 12 PM on April 18. It was so much fun having a full 24 hours to code that I ended up not sleeping a wink that night. I took occasional stretch breaks, but for the most part I was dialed in. I actually stayed up for 39 hours that weekend without so much as a minute napping between April 17 and April 18. I had an admitted students reception on the 18th directly after the hackathon and luckily, the adrenaline from the hackathon still carried over.
&lt;br class=&quot;post-line-break&quot; /&gt;&lt;/p&gt;
&lt;h3 class=&quot;post-subheader&quot;&gt;Results&lt;/h3&gt;
&lt;p&gt;The event was very well run and did a good job at providing the creature comforts that make any high schooler’s day: food and snacks. The 24 hour period went by incredibly quickly and the overall experience was very memorable. As an added bonus, our main project - the Uber Scheduler - won the first overall prize. I also won a personal award for my logo design for Execute Order 66 (see &lt;a href=&quot;/design/2016/05/01/github-octocat-design-challenge-winner.html&quot; target=&quot;_blank&quot;&gt;blog post&lt;/a&gt;).&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Apr 2016 11:26:51 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/04/18/first-hackathon-24-hours-straight-of-coding.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/04/18/first-hackathon-24-hours-straight-of-coding.html</guid>
        
        <category>apps</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Introduction to Services in AngularJS</title>
        <description>&lt;h3 class=&quot;post-subheader&quot;&gt;What Are Services?&lt;/h3&gt;
&lt;p&gt;In a nutshell, services are a way of making functions and variables global. They can be injected as dependencies in any controller and its functions/variables can be accessible across controllers.&lt;/p&gt;

&lt;h3 class=&quot;post-subheader&quot;&gt;Creating the Service&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    Create service file
    
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moduleName&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ionic&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ngCordova&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceFunction&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Kevin&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;‘&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceVariable&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;’&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Kevin&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testVariable&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  &lt;/li&gt;

  &lt;li&gt;
    Make sure the names are consistent
  &lt;/li&gt;

  &lt;li&gt;
    Add ‘geocoding’ (the module name) to the module’s dependency
    
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;scheduledRidesCtrl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ui.bootstrap&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;geocoding&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

    The way I explained this to a friend is basically using the &#39;ui.bootstrap&#39; analogy. Bootstrap in its most basic form is a a compilation of CSS styling and Javascript for functionality. When we include the &#39;ui.bootstrap&#39; dependency, we are essentially including that Javascript file to be used in this controller. It&#39;s not different when we create our own services. A service is basically a group of Javascript functions. If the services is included as a dependency, it will load all those Javascript functions and make them available to use in that controller. It&#39;s a good way of selectively loading specific Javascript files so that not all of your Javascript files have to load for every page.
  &lt;/li&gt;
  &lt;br class=&quot;post-line-break&quot; /&gt;

  &lt;li&gt;
    Include the name of the service function in the controller’s function(…, …)
    
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;scheduledRidesCtrl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$scope&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$ionicPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;serviceVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  &lt;/li&gt;

  &lt;li&gt;Can now use the functions and variables in any controller that you included the dependency for. Simply call:
    
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;serviceFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Runs the service function&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;serviceVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Uses the service variable as a regular variable&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 13 Mar 2016 16:30:29 -0700</pubDate>
        <link>http://khou22.github.io/programming/2016/03/13/introduction-to-services-in-angularjs.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/03/13/introduction-to-services-in-angularjs.html</guid>
        
        <category>ionic</category>
        
        <category>angularjs</category>
        
        <category>javascript</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Getting Started with the CNC Router</title>
        <description>&lt;h2&gt;Cutting Topographical Maps on the CNC Router&lt;/h2&gt;
&lt;p&gt;This blog post is primarily for my own notes. It&#39;s a work in progress. As my project progresses and I encounter more challenges, I will write about them here.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Process&lt;/b&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Import map from Google Earth plugin on SketchUp&lt;/li&gt;
  &lt;li&gt;Geo-location → Add location&lt;/li&gt;
  &lt;li&gt;Select show terrain&lt;/li&gt;
  &lt;li&gt;Export from sketchup as a .3ds&lt;/li&gt;
  &lt;li&gt;Import on Rhino as “Component / 3D Model”&lt;/li&gt;
  &lt;li&gt;Set size&lt;/li&gt;
  &lt;li&gt;Set Toolpath&lt;/li&gt;
  &lt;li&gt;Cut “3D Rough Toolpath” first&lt;/li&gt;
  &lt;li&gt;Cut “3D Finishing Toolpath”&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 06 Mar 2016 15:59:45 -0800</pubDate>
        <link>http://khou22.github.io/wood/2016/03/06/getting-started-with-the-cnc-router.html</link>
        <guid isPermaLink="true">http://khou22.github.io/wood/2016/03/06/getting-started-with-the-cnc-router.html</guid>
        
        <category>cnc-wood-router</category>
        
        
        <category>wood</category>
        
      </item>
    
      <item>
        <title>Installing and Getting Started with Python</title>
        <description>&lt;h1 id=&quot;downloading-and-installing-python&quot;&gt;Downloading and Installing Python&lt;/h1&gt;
&lt;p&gt;First download Python from the &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;Python website&lt;/a&gt;. After installing, you can install other helpful tools including &lt;a href=&quot;https://bootstrap.pypa.io/get-pip.py&quot;&gt;Pip&lt;/a&gt;. Save the file as a Python file (extension: “.py”) and navigate to the file in your terminal. Run the Python script using your terminal to install:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python get-pip.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so
In order to install globally you may to run a “sudo” install:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo python get-pip.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;installing-python-modules&quot;&gt;Installing Python Modules&lt;/h1&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo pip install requests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The entire Python setup was surprisingly easy. I had never programmed in Python before and only knew that it was good for backend scripts. I really wanted to expand my coding knowledge so I decided to take up Python. Here are some useful “projects” that got me going:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Web Scraping&lt;/li&gt;
  &lt;li&gt;Simple math formulas&lt;/li&gt;
  &lt;li&gt;Using cool modules&lt;/li&gt;
  &lt;li&gt;Calling API&#39;s like iTunes and YouTube&lt;/li&gt;
  &lt;li&gt;Encoding and decoding JSON data&lt;/li&gt;
  &lt;li&gt;Downloading files and making a progress bar&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;dynamic-progress-bar&quot;&gt;Dynamic Progress Bar&lt;/h1&gt;
&lt;p&gt;This project helped me gain a better understanding of how Python can communicate with the user via the Terminal interface.
Reference: &lt;a href=&quot;http://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console&quot;&gt;http://stackoverflow.com/questions/3173320/text-progress-bar-in-the-console&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d%%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;constructing-and-interpreting-json-data&quot;&gt;Constructing and Interpreting JSON data&lt;/h1&gt;
&lt;p&gt;This was great way for me to learn how Python data structures worked. It helped me gain a good foundation in simple variable types as well as how to communicate between different programming languages. For example, Javascript often sends data in the form of a JSON object. By doing this project I was able to pass data from my Javascript into my Python script and vice versa. &lt;a href=&quot;https://docs.python.org/2/library/json.html&quot;&gt;Reference&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 31 Jan 2016 05:44:44 -0800</pubDate>
        <link>http://khou22.github.io/programming/2016/01/31/installing-and-getting-started-with-python.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/01/31/installing-and-getting-started-with-python.html</guid>
        
        <category>python</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Getting Started with Ionic: First Impressions, Tips, and Notes to Self</title>
        <description>&lt;h1 id=&quot;working-on-the-project&quot;&gt;Working on the Project&lt;/h1&gt;
&lt;p&gt;Open server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;dev_appserver.py Uber&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;run-the-project&quot;&gt;Run the Project&lt;/h1&gt;
&lt;p&gt;To run a project locally. This will automatically reload when a file is saved/modified.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ionic serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To run in xcode simulator. This will automatically start the iPhone 6 simulator and run your app.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ionic run ios -l -c -s&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To get it on “Ionic View” for my iPhone. This will upload your project to your online account and make it accessible via your iPhone “Ionic View” app.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ionic upload&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;opening-the-project-in-xcode&quot;&gt;Opening the Project in Xcode&lt;/h1&gt;
&lt;p&gt;Open the xcode project on xcode. Will allow you to build and sync it to your device.
/Users/KevinHou/Documents/Programming/UberScheduler/UberScheduler/platforms/ios
Then click run&lt;/p&gt;

&lt;h1 id=&quot;logging-into-ionic-command-line&quot;&gt;Logging Into Ionic (Command Line)&lt;/h1&gt;
&lt;p&gt;To log in to Ionic. This will allow you to upload your app to Ionic view.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;ionic login&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;starting-a-new-ionic-project&quot;&gt;Starting a New Ionic Project&lt;/h1&gt;
&lt;p&gt;Good reference for starting a new Ionic project:
&lt;a href=&quot;http://stackoverflow.com/questions/30518213/error-uploading-ionic-app&quot; target=&quot;blank&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 28 Jan 2016 12:38:34 -0800</pubDate>
        <link>http://khou22.github.io/programming/2016/01/28/getting-started-with-ionic-first-impressions-tips-and-notes-to-self.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/01/28/getting-started-with-ionic-first-impressions-tips-and-notes-to-self.html</guid>
        
        <category>ionic</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>How to Build a Dropdown Menu Using Pure HTML and CSS</title>
        <description>&lt;p&gt;Here is how to make a bare bones dropdown navigation menu using only CSS and HTML. There are more complicated ways of doing this using JQuery, but I’ve found this method a lot easier. I pulled code from a variety of sources — the CSS mostly came from &lt;a href=&quot;http://www.tutorialrepublic.com/faq/show-hide-dropdown-menu-on-mouse-hover-using-css.php&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Source Code&lt;/h2&gt;

&lt;h3&gt;HTML&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-ul&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-li&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-a&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Work &lt;span class=&quot;ni&quot;&gt;&amp;amp;#9662;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-ul dropdown&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-li&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Apps&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-li&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Projects&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-li&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;School Projects&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-li&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;nav-a&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;CSS&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;CSS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.nav-ul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/*padding: 0;*/&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;list-style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f2f2f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.nav-ul&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;relative&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;line-height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;21px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;/*text-align: left;*/&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.nav-ul&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-li&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;25px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;text-decoration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.nav-ul&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-li&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-a&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#939393&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.nav-ul&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-li&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-ul.dropdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;min-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;125px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Set width of the dropdown */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#f2f2f2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;z-index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.nav-ul&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-li&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;:hover&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-ul.dropdown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;/* Display the dropdown */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.nav-ul&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-li&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-ul.dropdown&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.nav-li&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hope this helps!&lt;/p&gt;
</description>
        <pubDate>Thu, 14 Jan 2016 15:54:51 -0800</pubDate>
        <link>http://khou22.github.io/programming/2016/01/14/how-to-build-a-dropdown-menu-using-pure-html-and-css.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2016/01/14/how-to-build-a-dropdown-menu-using-pure-html-and-css.html</guid>
        
        <category>html</category>
        
        <category>css</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>OS X Shortcuts and Productivity Hacks</title>
        <description>&lt;p&gt;Happy holidays everyone! Here are some useful OS X tips and tricks that I thought I would share:
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;1) Command Line Shortcut: Aliases&lt;/h2&gt;
&lt;p&gt;Aliases in a traditional desktop UI are essentially shortcuts to other directories or files in your system. In general, they’re used to access objects hidden deep within your file structure or when you want a file in two seperate locations and you don’t want to copy it over.
&lt;br /&gt;&lt;br /&gt;
Aliases in your Terminal are similar in the sense that they provide shortcuts to files, but unlike in a traditional desktop UI, the aliases can be used at any level in the file system. An alias is not a shortcut file or folder. Instead it is a command that can be typed at any point.
&lt;br /&gt;&lt;br /&gt;
For example, if I access the folder ‘myFolder’ often, I would create an alias to basically trigger the function ‘cd /Users/Kevin/Documents/myFolder.’ To do this, open ‘~/.bash_profile’ and add the following line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;myFolderShortcut&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;cd /Users/Kevin/Documents/myFolder&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
The .bash_profile file is a customizable list of user-contributed functions, aliases, etc. In some cases, the .bash_profile is loaded automatically when the Terminal starts, but I’ve found that mine doesn’t do this. Instead I type:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; .bash_profile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;whenever I first open a Terminal session.
&lt;br /&gt;&lt;br /&gt;
Now, you can type&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;myFolderShortcut&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;anywhere in your Terminal session and you will be directed to myFolder.
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;2) Faster Mac Dock Productivity&lt;/h2&gt;
&lt;p&gt;The Mac Dock is a great and simple way to quickly access your favorite applications without having to open your Applications folder; however, the half a second it takes to trigger the Dock reveal and then the extra second it takes for the Dock to slide into view can waste precious time. I don’t like having the Dock visible on my desktop because it takes up previous screen real estate. I found &lt;a href=&quot;https://www.youtube.com/watch?v=ZaxkqlRE-NI&quot;&gt;this video&lt;/a&gt; on Flipboard that explains how to “correclty” use the Mac Dock in the fastest and most efficient way possible:&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube.com/embed/ZaxkqlRE-NI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;
Here is a screenshot of my setup:
&lt;img src=&quot;./../../../../media/blog/images/Faster Mac Dock Reveal.png&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2&gt;3) Creating and Converting Plain Text Files on the Mac&lt;/h2&gt;
&lt;p&gt;Plain text files (ext. ‘.txt’) are fantastic ways to remove styling on text, share information between apps, etc. I realized I didn’t know how to create plain text files on my Mac. I researched it and found the solution to be quite simple. The stock Text Edit application on OS X has a native function to convert text files into plain text.
&lt;br /&gt;&lt;br /&gt;
In TextEdit, navigate to Format-&amp;gt;Make Plain Text. The keyboard shortcut command is: Command + Shift + T. It works similarly when converting Plain Text to Rich Text (ext. ‘.rtf’). If there is existing text, the application will prompt you with a warning before it converts.&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;Hope this helped!&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Dec 2015 04:59:02 -0800</pubDate>
        <link>http://khou22.github.io/computer/2015/12/25/os-x-shortcuts-and-productivity-hacks.html</link>
        <guid isPermaLink="true">http://khou22.github.io/computer/2015/12/25/os-x-shortcuts-and-productivity-hacks.html</guid>
        
        <category>unix</category>
        
        <category>osx</category>
        
        
        <category>computer</category>
        
      </item>
    
  </channel>
</rss>
