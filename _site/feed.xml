<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kevin Hou&#39;s Blog</title>
    <description>A blog about programming, wood, and anything that comes to my mind. Enjoy.
</description>
    <link>http://khou22.github.io/</link>
    <atom:link href="http://khou22.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 07 Nov 2015 20:51:58 -0800</pubDate>
    <lastBuildDate>Sat, 07 Nov 2015 20:51:58 -0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Text Analysis App: How Do You Talk To People on Facebook Versus In An Engineering Report?</title>
        <description>&lt;p&gt;A couple weeks ago I downloaded by my &lt;a href=&quot;https://www.facebook.com/help/131112897028467/&quot;&gt;Facebook user data&lt;/a&gt;. By law, Facebook is required to package and send you your raw Facebook data…including every message you’ve ever sent.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;It was shocking how much personal information was available at my finger tips just from my Facebook profile. I was intrigued that all my Facebook messages were in once place. I decided to program an app that would sort through my messages and pick out the messages that I send. I also added in the ability to read simple text files such as my essays, emails, etc. The app can be found here:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://khou22.github.io/blog/apps/text-analysis&quot; target=&quot;_blank&quot;&gt;&lt;b&gt;Text-Analysis App&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I created options to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;FIlter out other people&#39;s messages to isolate your own data&lt;/li&gt;
  &lt;li&gt;Filter out messages only between you and specific person(s)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Because it’s first semester senior year (college apps are in full swing) I haven’t had as much time as I’d like to work on this app. I’ve spent about a week on it and I’m currently working on adding new features. Right now it works for any text file and any Facebook message file (detailed instructions in the app).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I’ve learned so much in the past couple week while programming this app, the most significant being memory management. I’m dealing with millions of lines of user data (my message file was a whopping 30 mb of pure text) and my computer has crashed a lot under the strain. I’ve managed to fix most of the issues and it’s so interesting learning how to efficiently go through such massive amounts of data without overloading the browser. One of the neat options I added in was a ‘big data’ option. If checked it will filter out any word that doesn’t occur over the specified number of times, therefore decreasing the load on the browser.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I encourage you to give it a try! You might learn something neat about the way you speak. I’ll be adding more analysis in the coming weeks including &lt;a href=&quot;#&quot; data-toggle=&quot;tooltip&quot; title=&quot;See the Flesch-Kincaid Grade Level formula&quot;&gt;writing grade level&lt;/a&gt; (according to US standards), readability, emotional state, etc. It’ll be interesting!&lt;/p&gt;

&lt;p&gt;If you have any suggestions or comments feel free to &lt;a href=&quot;mailto:kevin.ch.hou@gmail.com&quot;&gt;let me know&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Nov 2015 06:23:08 -0800</pubDate>
        <link>http://khou22.github.io/programming/2015/11/01/text-analysis-app-how-do-you-talk-to-people-on-facebook-versus-in-an-engineering-report.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/11/01/text-analysis-app-how-do-you-talk-to-people-on-facebook-versus-in-an-engineering-report.html</guid>
        
        <category>apps</category>
        
        <category>javascript</category>
        
        <category>reactjs</category>
        
        <category>html</category>
        
        <category>css</category>
        
        <category>node-js</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>NodeJS Basics - Setting Up A Local Web Server</title>
        <description>&lt;p&gt;I’m starting a new project with a group of kids to program a plagiarism app for my school. After debating between PHP and Node.js, we decided to use Node.js as our primary ecosystem. After a bit of research and a couple of YouTube videos, I set up my own simple web server. My repository can be found &lt;a href=&quot;https://github.com/khou22/NodeJSPractice&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here are the basics:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Node.js in a nutshell runs Javascript locally from your terminal&lt;/li&gt;
  &lt;li&gt;It takes Chrome’s V8 engine and uses it on the client side rather than attaching it to an HTML document (Javascript doesn’t have ‘document’ or ‘window’)&lt;/li&gt;
  &lt;li&gt;Node.js can easily create a local server to compile, build, and emulate your web-based code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I worked briefly with Node.js over the summer at Salesforce.com when I was a UX Engineer, but I had never truly dove into the compiler I was using. I was under a lot of time pressure and was behind the learning curve, so I simply accepted what came out of it.&lt;/p&gt;

&lt;p&gt;It’s all coming back to me now and I’m realizing that I actually &lt;i&gt;do&lt;/i&gt; understand a great deal of what’s going on. Here are some basics that I used over the summer that people should know:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Node.js and NPM&lt;/b&gt;
Node.js also built NPM - Node Package Manager - which is the default package manager for Node.js. It is responsible for downloading, importing, and including open-source packages, or libraries if you will. These packages are largely user-contributed and can be downloaded and included like so:&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Terminal&lt;/b&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; npm install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;packageName&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Javascript&lt;/b&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;packageName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Includes the package content as an object&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Packages are a super easy way to install predefined functions that can do common things. They’re incredibly simple and easy to pick up.&lt;/p&gt;

&lt;p&gt;You &lt;i&gt;never&lt;/i&gt; want to include packages themselves in repositories. They take up space and are simply non-essentials. Because of the nature of open-sourced code, packages are mostly all available online to be installed by anyone. To share dependencies, you need to create a ‘package.json’ file — a file that specifies which packages should be included.&lt;/p&gt;

&lt;p&gt;To create the ‘package.json’ file type, type (in Terminal):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; npm init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To log a dependency in the ‘package.json’:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; npm install &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;packageName&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; -S&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you wish to install all the packages specified in the ‘package.json’ file, simply type:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; npm install&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will install all the required modules. This sytem makes sharing code incredibly elegant and easy!&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Including Other JS Files in Your Code&lt;/b&gt;
It’s very easy to include other Javascript files in your code. In fact, it’s almsot identical to including a package dependency. Simply include:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;m2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;./module2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Assumes js file&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Must export your data in module2 otherwise it just reads an empty object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//In module2.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Will export an object&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//To access in other JS files, a will be stored as data.a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Creating a Simple Local Web Server&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;It’s very easy to start your own web server to run compiled code. It’s great for prototypes and running web apps locally. Here’s a simple web server that highlights the basic functionality:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//Every time server hears something at port 3000, will respond with this:&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Got a request&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Returns in the terminal&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Sends the window content. The browser will display &amp;quot;Hi&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Specifies the port at which it will be served&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hope this helps! I’ll be updating my site with various Node.js content and updates on the Plargiism App. In the meantime, if you have any questions feel free to &lt;a href=&quot;mailto:kevin.ch.hou@gmail.com&quot;&gt;reach out&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 25 Oct 2015 14:16:28 -0700</pubDate>
        <link>http://khou22.github.io/programming/2015/10/25/nodejs-basics---setting-up-a-local-web-server.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/10/25/nodejs-basics---setting-up-a-local-web-server.html</guid>
        
        <category>node-js</category>
        
        <category>javascript</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Reading a Text File Using HTML and Javascript</title>
        <description>&lt;p&gt;I just started working on a project that will analyze the user’s text and look for patterns, word usage, etc. My first hurdle was creating a system in which the user can upload a text file and have the server read it as a string.&lt;/p&gt;

&lt;p&gt;After a lot of piecing together research online, I think I’ve found the answer.&lt;/p&gt;

&lt;p&gt;Start with a simple HTML form input. This form will accept a tag and, when submitted, will run the function “loadFile.” I am using ReactJS so I had to bind the function to the parent.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;form&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onSubmit=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{this.loadFile.bind(this)}&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  Select text file: &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;file&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;selectedFile&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;accept=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;.txt&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;i&gt;React requires closing slashes on the inputs because it only recognizes “complete” tags.&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now here’s where the fun happens:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;loadFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Loading file&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Feedback&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectedFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;selectedFile&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Identifying the selected file using the id of the form tag&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Feedback to make sure the file is loaded correctly&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FileReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Create a document reader (built into HTML5)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Declare the asyncronous callback for when a file is loaded into the reader&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//The contents of the text file&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Spits back the contents of the text file&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readAsText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectedFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Calls the reader to read our selected text file&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//The reader goes to its &amp;quot;onload&amp;quot; function and executes that code&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Prevents the page from auto-refreshing&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! It was so satisfying once it worked. Hope this helps!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Main Sources:
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsText&lt;/a&gt;
&lt;a href=&quot;http://blog.teamtreehouse.com/reading-files-using-the-html5-filereader-api&quot;&gt;http://blog.teamtreehouse.com/reading-files-using-the-html5-filereader-api&lt;/a&gt;
&lt;a href=&quot;http://www.htmlgoodies.com/beyond/javascript/read-text-files-using-the-javascript-filereader.html#fbid=imWj_l2wfU6&quot;&gt;http://www.htmlgoodies.com/beyond/javascript/read-text-files-using-the-javascript-filereader.html#fbid=imWj_l2wfU6&lt;/a&gt;
&lt;a href=&quot;http://www.w3schools.com/tags/att_input_type.asp&quot;&gt;http://www.w3schools.com/tags/att_input_type.asp&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 13:55:04 -0700</pubDate>
        <link>http://khou22.github.io/programming/2015/10/17/reading-a-text-file-using-html-and-javascript.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/10/17/reading-a-text-file-using-html-and-javascript.html</guid>
        
        <category>html</category>
        
        <category>javascript</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Jekyll On El Capitan (OS X 10.11)</title>
        <description>&lt;p&gt;I upgraded to OS X 10.11, officially called El Capitan, this past week and discovered a concerning bug when building my site. My terminal was unable to recognize the initiator term: “jekyll.”&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; jekyll
zsh: &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;not found: jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I believe this is due to a new system security setting that prohibits ruby gems from being downloaded in the traditional way. For anyone wondering how to fix this, I found the solution after poking around online:&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;./../../../../media/blog/images/OSX 10.11 Jekyll.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In your terminal, simply type in:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$:&lt;/span&gt; sudo gem install -n /usr/local/bin jekyll&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hope this helps! Now you can continue enjoying Jekyll while embracing the new OS X operating system.&lt;/p&gt;
</description>
        <pubDate>Fri, 09 Oct 2015 16:53:42 -0700</pubDate>
        <link>http://khou22.github.io/programming/2015/10/09/jekyll-on-el-capitan-osx-1011.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/10/09/jekyll-on-el-capitan-osx-1011.html</guid>
        
        <category>Jekyll</category>
        
        <category>osx</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Visualizing a Javascript Callback</title>
        <description>&lt;p&gt;Ever wondered what technical sounding words like “asyncrhonis” or “event-loops” meant? It took me a while to figure out all the complicated terminology associated with code execution, but basically these words all relate to the order in which lines of code are run.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;I came across a neat web app that one of my LinkedIn connections posted called &lt;a href=&quot;http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!&quot; target=&quot;_blank&quot;&gt;Loupe&lt;/a&gt;. According to their website, &lt;i&gt;“Loupe is a little visualisation to help you understand how JavaScript’s call stack/event loop/callback queue interact with each other.”&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here is a brief overview of the concept:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/8aGhZQkoFbQ&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you are at all curious or just want a new perspective on things, I encourage you check out &lt;a href=&quot;http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!&quot; target=&quot;_blank&quot;&gt;Loupe&lt;/a&gt;!&lt;/p&gt;
</description>
        <pubDate>Thu, 01 Oct 2015 11:26:42 -0700</pubDate>
        <link>http://khou22.github.io/programming/2015/10/01/visualizing-a-javascript-callback.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/10/01/visualizing-a-javascript-callback.html</guid>
        
        <category>Javascript</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>React Syntax Highlighting in Sublime Text Editor (Babel Sublime)</title>
        <description>&lt;p&gt;Since I’m working with the Javascript framework, React, I would like to have a syntax highlighter in my Sublime IDE. Babel-Sublime is just what I’m looking for - it is integrated with Sublime and provides syntax highlighting for JSX code.
&lt;br /&gt;
&lt;br /&gt;
You can install it using Package Control and feel free to check out my blog post to see how that’s done. Here’s the link to Babel-Sublime:
&lt;br /&gt;
&lt;a href=&quot;https://github.com/babel/babel-sublime&quot;&gt;https://github.com/babel/babel-sublime&lt;/a&gt;
&lt;br /&gt;
&lt;br /&gt;
I highly recommend this for anyone working in ReactJS on Sublime!&lt;/p&gt;
</description>
        <pubDate>Sat, 12 Sep 2015 14:52:25 -0700</pubDate>
        <link>http://khou22.github.io/programming/2015/09/12/react-syntax-highlighting-in-sublime-text-editor-babel-sublime.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/09/12/react-syntax-highlighting-in-sublime-text-editor-babel-sublime.html</guid>
        
        <category>sublime</category>
        
        <category>react</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Comparison Operators: &#39;==&#39; vs. &#39;===&#39;</title>
        <description>&lt;p&gt;For the longest time, I didn’t realize that ‘===’ was a comparison operator in Javascript. I just recently learned what the difference between them was. The double equal signs tell the comparison statement to convert the two values into the same type before comparing them. The triple equal signs do not convert the values before coimparing. If the two values do not share the same type, it will simply return false. For example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Will return true&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//Will return false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a super short post, but I figured I should write it down since it was interesting and something I should remember.&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Sep 2015 14:41:46 -0700</pubDate>
        <link>http://khou22.github.io/programming/2015/09/08/comparison-operators--vs-.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/09/08/comparison-operators--vs-.html</guid>
        
        <category>javascript</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>CSS Filters and Effects</title>
        <description>&lt;p&gt;Since most of the site (as of now) does not use Bootstrap as a default style tool, I’ve been doing a lot of custom CSS from scratch. My landing page is meant to mimic a sheet of glass with a semi-transparent background and border. Here’s some quick and simple CSS that can turn any div into a piece of glass:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.glass&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;border-bottom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2px&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;solid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;border-bottom-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ccc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;border-bottom-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shadow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6px&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This setup can easily be customized by changing the values of the background-color, border-color, etc. For example, my component background is not actually transparent white. My white text was a little too hard to see against the white background, so I changed it to have a tint of grey:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;rgba&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Another cool CSS3 trick is to apply filters on images. This is similar to iPhone filters or filters you would see on Instagram. Here’s an example of a greyscale filter with a blur. I was originally planning on using this for my landing page, but I ended up scrapping the idea because I liked seeing the vibrant colors of my pictures, especially the woodworking ones.&lt;/p&gt;

&lt;p&gt;Simply apply this to your CSS class:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;-webkit-filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;grayscale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or as an inline style using ReactJS:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;backgroundBlur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;WebkitFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;grayscale(0.5) blur(7px)&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//As an inline style - syntax&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Hope this helps.&lt;/p&gt;
</description>
        <pubDate>Mon, 17 Aug 2015 00:00:00 -0700</pubDate>
        <link>http://khou22.github.io/programming/2015/08/17/css-filters-and-effects.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/08/17/css-filters-and-effects.html</guid>
        
        <category>CSS</category>
        
        <category>CSS3</category>
        
        <category>reactjs</category>
        
        
        <category>programming</category>
        
      </item>
    
      <item>
        <title>Cropping Square Images in Mac Preview</title>
        <description>&lt;p&gt;A discovered another Mac OS trick that uses the option key. To crop a picture in Preview into a square, hold the option key and the shift key while dragging with your mouse. This causes the selection to scale proportionally.&lt;/p&gt;

&lt;p&gt;There are two possible outcomes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If you have an existing selection, it will keep the same aspect ratio.&lt;/li&gt;
  &lt;li&gt;If you have no selection, it will create a square selection.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 17 Aug 2015 00:00:00 -0700</pubDate>
        <link>http://khou22.github.io/computer/2015/08/17/cropping-square-images-in-mac-preview.html</link>
        <guid isPermaLink="true">http://khou22.github.io/computer/2015/08/17/cropping-square-images-in-mac-preview.html</guid>
        
        <category>osx</category>
        
        
        <category>computer</category>
        
      </item>
    
      <item>
        <title>Small Lessons: Disabling Scrolling, Extra Screen Sizes, Mirroring and Screen Arrangement Tricks</title>
        <description>&lt;p&gt;I’ve been dealing with some really weirdly-sized images for my project and this have given me all sorts of issues in terms of scaling, cropping, and scrolling. There are many instances where I don’t have any content off the screen, but there is still a side scroll. I’ve tried inspecting my elements to see which part of my code is responsible for the extra white space, but to no avail. I settled with just disabling the side scroll for this app. Here’s how you do it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nt&quot;&gt;Simply&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;your&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;CSS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;overflow-x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Another cool little Mac OSX tip that I learned this week was how to show hidden screen sizes/aspect ratios for monitors. If you hook up your monitor and go to the display prefernces, you should only see a few possible screen sizes. There’s a trick to get more specific resolutions. Simply hold option when clicking on “Scaled.” It works like a charm!
&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;
You can also choose to mirror a select screen by holding option and dragging a screen over another screen in display arrangement system preferences. For example, you can have a 3 display setup with your third display mirroring your second display. You can still use your second display as an additional monitor, but your third display will now be mirroring your second.
&lt;br /&gt;
&lt;br /&gt;
It’s cool to see what holding option does when clicking! Wonder what else Apple has hidden from us using the “option” key…&lt;/p&gt;
</description>
        <pubDate>Sun, 16 Aug 2015 04:29:33 -0700</pubDate>
        <link>http://khou22.github.io/programming/2015/08/16/small-lessons-disabling-scrolling-extra-screen-sizes-mirroring-and-screen-arrangement-tricks.html</link>
        <guid isPermaLink="true">http://khou22.github.io/programming/2015/08/16/small-lessons-disabling-scrolling-extra-screen-sizes-mirroring-and-screen-arrangement-tricks.html</guid>
        
        <category>css</category>
        
        <category>osx</category>
        
        
        <category>programming</category>
        
      </item>
    
  </channel>
</rss>
